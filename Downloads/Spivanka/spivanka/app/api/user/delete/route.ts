import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import clientPromise from '@/lib/mongodb'

export async function DELETE(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const client = await clientPromise
    const db = client.db()
    const userEmail = session.user.email

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deletePromises = [
      // –£–¥–∞–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–∏—â–µ–º –ø–æ userId)
      db.collection('greetings').deleteMany({ userId: userEmail }),
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∏—â–µ–º –ø–æ userId)
      db.collection('generation_status').deleteMany({ userId: userEmail }),
      
      // –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ (–∏—â–µ–º –ø–æ userEmail)
      db.collection('payments').deleteMany({ userEmail }),
      
      // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∏—â–µ–º –ø–æ userEmail)
      db.collection('calendar_tokens').deleteMany({ userEmail }),
      
      // –£–¥–∞–ª—è–µ–º –∫—ç—à –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∏—â–µ–º –ø–æ userEmail)
      db.collection('calendar_cache').deleteMany({ userEmail })
    ]

    const results = await Promise.all(deletePromises)
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è
    console.log(`üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è ${userEmail}:`)
    console.log(`  - –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: ${results[0].deletedCount}`)
    console.log(`  - –°—Ç–∞—Ç—É—Å—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${results[1].deletedCount}`)
    console.log(`  - –ü–ª–∞—Ç–µ–∂–∏: ${results[2].deletedCount}`)
    console.log(`  - –¢–æ–∫–µ–Ω—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è: ${results[3].deletedCount}`)
    console.log(`  - –ö—ç—à –∫–∞–ª–µ–Ω–¥–∞—Ä—è: ${results[4].deletedCount}`)

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userEmail}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω—ã
    const remainingGreetings = await db.collection('greetings').countDocuments({ userId: userEmail })
    const remainingStatuses = await db.collection('generation_status').countDocuments({ userId: userEmail })
    const remainingPayments = await db.collection('payments').countDocuments({ userEmail })
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è ${userEmail}:`)
    console.log(`  - –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π: ${remainingGreetings}`)
    console.log(`  - –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç–∞—Ç—É—Å–æ–≤: ${remainingStatuses}`)
    console.log(`  - –û—Å—Ç–∞–ª–æ—Å—å –ø–ª–∞—Ç–µ–∂–µ–π: ${remainingPayments}`)

    return NextResponse.json({ 
      success: true, 
      message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ',
      deletedCounts: {
        greetings: results[0].deletedCount,
        generationStatus: results[1].deletedCount,
        payments: results[2].deletedCount,
        calendarTokens: results[3].deletedCount,
        calendarCache: results[4].deletedCount
      }
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
} 