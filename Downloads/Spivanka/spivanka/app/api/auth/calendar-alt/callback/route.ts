import { NextRequest, NextResponse } from 'next/server'
import clientPromise from '@/lib/mongodb'

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const code = searchParams.get('code')
    const state = searchParams.get('state') // email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º calendar_
    const error = searchParams.get('error')

    if (error) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è')
      return NextResponse.redirect(new URL('/create', request.url))
    }

    if (!code || !state) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç code –∏–ª–∏ state –≤ callback')
      return NextResponse.redirect(new URL('/create', request.url))
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ state (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å calendar_)
    const email = state.replace('calendar_', '')

    // –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        client_id: process.env.GOOGLE_CLIENT_ID!,
        client_secret: process.env.GOOGLE_CLIENT_SECRET!,
        code: code,
        grant_type: 'authorization_code',
        redirect_uri: `${process.env.NEXTAUTH_URL}/api/auth/calendar-alt/callback`,
      }),
    })

    const tokens = await tokenResponse.json()

    if (!tokenResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', tokens)
      return NextResponse.redirect(new URL('/create', request.url))
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const client = await clientPromise
    const db = client.db()
    const tokensCollection = db.collection('user_tokens')

    await tokensCollection.updateOne(
      { email: email.toLowerCase() },
      {
        $set: {
          email: email.toLowerCase(),
          accessToken: tokens.access_token,
          refreshToken: tokens.refresh_token,
          expiresAt: new Date(Date.now() + tokens.expires_in * 1000),
          calendarAccess: true,
          scope: tokens.scope,
          updatedAt: new Date()
        }
      },
      { upsert: true }
    )

    console.log('‚úÖ –¢–æ–∫–µ–Ω—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è:', email)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    try {
      console.log('üìÖ –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', email)
      
      // –°–æ–∑–¥–∞–µ–º OAuth2 –∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–≤—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
      const { google } = await import('googleapis')
      const oauth2Client = new google.auth.OAuth2(
        process.env.GOOGLE_CLIENT_ID,
        process.env.GOOGLE_CLIENT_SECRET,
        `${process.env.NEXTAUTH_URL}/api/auth/calendar-alt/callback`
      )
      
      oauth2Client.setCredentials({
        access_token: tokens.access_token,
        refresh_token: tokens.refresh_token
      })
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
      const calendar = google.calendar({ version: 'v3', auth: oauth2Client })
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
      const calendarsResponse = await calendar.calendarList.list()
      const calendars = calendarsResponse.data.items || []
      
      console.log('üìÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', calendars.length)
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: –æ—Ç —Å–µ–≥–æ–¥–Ω—è –¥–æ +1 –≥–æ–¥
      const timeMin = new Date()
      const timeMax = new Date()
      timeMax.setFullYear(timeMax.getFullYear() + 1)
      
      console.log('üìÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π —Å', timeMin.toISOString(), '–¥–æ', timeMax.toISOString())
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
      const allEvents: any[] = []
      
      for (const cal of calendars) {
        try {
          const response = await calendar.events.list({
            calendarId: cal.id || 'primary',
            timeMin: timeMin.toISOString(),
            timeMax: timeMax.toISOString(),
            singleEvents: true,
            orderBy: 'startTime',
            maxResults: 250
          })
          
          const calendarEvents = response.data.items || []
          console.log(`üìÖ –ò–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è "${cal.summary}" –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${calendarEvents.length}`)
          
          allEvents.push(...calendarEvents)
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ${cal.summary}:`, error)
        }
      }
      
      console.log('üìÖ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:', allEvents.length)
      
      // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ API –∫—ç—à–∞
      try {
        console.log('üìÖ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ API –∫—ç—à–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
        const cacheResponse = await fetch(`${process.env.NEXTAUTH_URL}/api/calendar/cache`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        })
        
        if (cacheResponse.ok) {
          const cacheData = await cacheResponse.json()
          console.log('‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', cacheData.eventsCount, '—Å–æ–±—ã—Ç–∏–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ')
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', cacheResponse.status)
        }
      } catch (cacheError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ API –∫—ç—à–∞:', cacheError)
      }
      
      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      
    } catch (syncError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', syncError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
    }

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è
    return NextResponse.redirect(new URL('/create', request.url))

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error)
    return NextResponse.redirect(new URL('/create', request.url))
  }
} 