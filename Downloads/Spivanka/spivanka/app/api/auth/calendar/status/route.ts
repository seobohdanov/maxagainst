import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import clientPromise from '@/lib/mongodb'

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    console.log('üìÖ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è:', session.user.email)

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const client = await clientPromise
    const db = client.db('spivanka')
    const collection = db.collection('calendar_tokens')

    const calendarTokens = await collection.findOne({ userEmail: session.user.email })

    if (!calendarTokens) {
      console.log('üìÖ –¢–æ–∫–µ–Ω—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return NextResponse.json({
        connected: false,
        message: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∏ –ª–∏ —Ç–æ–∫–µ–Ω—ã
    const now = new Date()
    const isExpired = calendarTokens.expiresAt && now > calendarTokens.expiresAt

    console.log('üìÖ –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', {
      hasAccessToken: !!calendarTokens.accessToken,
      hasRefreshToken: !!calendarTokens.refreshToken,
      expiresAt: calendarTokens.expiresAt,
      isExpired
    })

    return NextResponse.json({
      connected: true,
      hasAccessToken: !!calendarTokens.accessToken,
      hasRefreshToken: !!calendarTokens.refreshToken,
      expiresAt: calendarTokens.expiresAt,
      isExpired,
      scope: calendarTokens.scope,
      connectedAt: calendarTokens.createdAt
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error)
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 })
  }
} 