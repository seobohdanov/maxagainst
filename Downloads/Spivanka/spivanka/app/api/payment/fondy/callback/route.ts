import { NextRequest, NextResponse } from 'next/server'
import crypto from 'crypto'
import clientPromise from '@/lib/mongodb'

const FONDY_SECRET_KEY = process.env.FONDY_SECRET_KEY || ''

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    console.log('üí∞ Fondy callback –æ—Ç—Ä–∏–º–∞–Ω–æ:', body)

    if (!body.order_id || !body.signature) {
      return NextResponse.json({ error: '–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ' }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    const isValidSignature = verifyFondySignature(body, FONDY_SECRET_KEY)
    
    if (!isValidSignature) {
      console.error('‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –ø—ñ–¥–ø–∏—Å Fondy')
      return NextResponse.json({ error: '–ù–µ–≤—ñ—Ä–Ω–∞ –ø—ñ–¥–ø–∏—Å' }, { status: 400 })
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try {
      const client = await clientPromise
      const db = client.db()

      const paymentData: any = {
        orderId: body.order_id,
        transactionId: body.payment_id || body.transaction_id,
        amount: Number(body.amount) / 100, // Fondy –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        currency: body.currency || 'UAH',
        status: mapFondyStatus(body.order_status),
        paymentMethod: 'fondy',
        description: body.order_desc || '–ú—É–∑–∏—á–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è',
        fondyData: body, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Fondy
        createdAt: new Date(),
        updatedAt: new Date()
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ order_id (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑—å —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º)
      if (body.order_id) {
        const greeting = await db.collection('greetings').findOne({
          taskId: { $regex: body.order_id.replace('order_', '') }
        })
        
        if (greeting) {
          paymentData.userId = greeting.userId
          paymentData.userEmail = greeting.userId // –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ userId = email
          paymentData.taskId = greeting.taskId
          paymentData.recipientName = greeting.recipientName
          paymentData.occasion = greeting.occasion
          paymentData.plan = greeting.plan
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–ª–∞—Ç–µ–∂
      const existingPayment = await db.collection('payments').findOne({
        $or: [
          { orderId: body.order_id },
          { transactionId: body.payment_id || body.transaction_id }
        ]
      })

      if (existingPayment) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂
        await db.collection('payments').updateOne(
          { _id: existingPayment._id },
          { $set: { ...paymentData, updatedAt: new Date() } }
        )
        console.log(`üí∞ –ü–ª–∞—Ç–µ–∂ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î: ${body.order_id}, —Å—Ç–∞—Ç—É—Å: ${body.order_status}`)
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        await db.collection('payments').insertOne(paymentData)
        console.log(`üí∞ –ù–æ–≤–∏–π –ø–ª–∞—Ç–µ–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î: ${body.order_id}, —Å—É–º–∞: ${paymentData.amount} ${paymentData.currency}`)
      }

    } catch (dbError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –≤ –ë–î:', dbError)
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    if (body.order_status === 'approved') {
      // –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
      console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø—ñ—à–Ω–∏–π:', body.order_id)
      return NextResponse.json({ success: true })
    } else if (body.order_status === 'declined') {
      // –ü–ª–∞—Ç–µ–∂ –Ω–µ—É—Å–ø–µ—à–µ–Ω
      console.log('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –≤–¥–∞–≤—Å—è:', body.order_id)
      return NextResponse.json({ success: false, error: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –≤–¥–∞–≤—Å—è' })
    } else {
      // –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã (processing, etc.)
      console.log('‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–æ–±—Ü—ñ:', body.order_id, '—Å—Ç–∞—Ç—É—Å:', body.order_status)
      return NextResponse.json({ success: true, status: body.order_status })
    }

  } catch (error) {
    console.error('‚ùå Fondy callback –ø–æ–º–∏–ª–∫–∞:', error)
    return NextResponse.json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback' }, { status: 500 })
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ Fondy —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
function verifyFondySignature(data: any, secretKey: string): boolean {
  if (!secretKey) return false
  
  const { signature, response_signature_string, ...params } = data
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const filteredData = Object.fromEntries(
    Object.entries(params).filter(([key, value]) => 
      value !== null && value !== undefined && value !== ''
    )
  )
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const sortedKeys = Object.keys(filteredData).sort()
  
  // –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const values = sortedKeys.map(key => filteredData[key])
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ –Ω–∞—á–∞–ª–æ
  values.unshift(secretKey)
  
  // –°–æ–µ–¥–∏–Ω—è–µ–º —Å–∏–º–≤–æ–ª–æ–º |
  const stringToSign = values.join('|')
  
  // –°–æ–∑–¥–∞–µ–º SHA-1 —Ö–µ—à –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
  const expectedSignature = crypto.createHash('sha1').update(stringToSign).digest('hex')
  
  console.log('üîê Fondy signature verification:', {
    received: signature,
    expected: expectedSignature,
    string: stringToSign.replace(secretKey, '***SECRET***')
  })
  
  return signature === expectedSignature
}

// –§—É–Ω–∫—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ Fondy –≤ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
function mapFondyStatus(fondyStatus: string): 'success' | 'pending' | 'failed' {
  switch (fondyStatus) {
    case 'approved':
      return 'success'
    case 'declined':
    case 'expired':
    case 'reversed':
      return 'failed'
    case 'processing':
    case 'created':
    default:
      return 'pending'
  }
}
