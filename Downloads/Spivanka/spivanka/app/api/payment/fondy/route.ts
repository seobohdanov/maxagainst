import { NextRequest, NextResponse } from 'next/server'
import crypto from 'crypto'

const FONDY_MERCHANT_ID = process.env.FONDY_MERCHANT_ID || '1555718'
const FONDY_SECRET_KEY = process.env.FONDY_SECRET_KEY || 'PYEsFydVce3sFvmX2s6KuYLyjonuQgFO'

export async function POST(request: NextRequest) {
  try {
    const { amount, description, orderId } = await request.json()

    if (!FONDY_SECRET_KEY) {
      return NextResponse.json(
        { error: 'Fondy –∫–ª—é—á—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ' },
        { status: 500 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    const paymentData = {
      merchant_id: parseInt(FONDY_MERCHANT_ID),
      order_id: orderId || `order_${Date.now()}_${Math.random().toString(36).substring(7)}`,
      order_desc: description || '–ú—É–∑–∏—á–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è',
      amount: amount * 100, // Fondy —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–ø–µ–π–∫–∞—Ö
      currency: 'UAH',
      lang: 'uk',
      sender_email: 'noreply@spivanka.com',
      response_url: `${process.env.NEXTAUTH_URL}/payment/success`,
      server_callback_url: `${process.env.NEXTAUTH_URL}/api/payment/fondy/callback`,
      version: '1.0.1'
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è Fondy
    const signature = createFondySignature(paymentData, FONDY_SECRET_KEY)
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    if (process.env.NODE_ENV === 'development') {
      console.log('üîê Fondy signature data:', {
        merchant_id: paymentData.merchant_id,
        order_id: paymentData.order_id,
        amount: paymentData.amount,
        currency: paymentData.currency,
        signature: signature
      })
    }

    return NextResponse.json({
      success: true,
      paymentData: {
        ...paymentData,
        signature: signature
      }
    })

  } catch (error) {
    console.error('Fondy API error:', error)
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É' },
      { status: 500 }
    )
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Fondy —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
function createFondySignature(data: any, secretKey: string): string {
  // –î–æ–±–∞–≤–ª—è–µ–º merchant_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  const dataWithMerchant = { ...data, merchant_id: data.merchant_id }
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º null, undefined, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
  const filteredData = Object.fromEntries(
    Object.entries(dataWithMerchant).filter(([key, value]) => 
      value !== null && value !== undefined && value !== ''
    )
  )
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const sortedKeys = Object.keys(filteredData).sort()
  
  // –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const values = sortedKeys.map(key => filteredData[key])
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
  values.unshift(secretKey)
  
  // –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–º |
  const stringToSign = values.join('|')
  
  // –°–æ–∑–¥–∞–µ–º SHA-1 —Ö–µ—à –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
  return crypto.createHash('sha1').update(stringToSign).digest('hex')
} 