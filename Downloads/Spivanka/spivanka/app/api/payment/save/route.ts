import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import clientPromise from '@/lib/mongodb'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession()
    if (!session?.user?.email) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ' }, { status: 401 })
    }

    const {
      taskId,
      orderId,
      amount,
      plan,
      status,
      transactionId,
      paymentMethod = 'liqpay',
      description,
      recipientName,
      occasion
    } = await request.json()

    if (!amount || !plan) {
      return NextResponse.json({ error: '–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ' }, { status: 400 })
    }

    const client = await clientPromise
    const db = client.db()

    const paymentData = {
      taskId: taskId || null,
      orderId: orderId || `order_${Date.now()}_${Math.random().toString(36).substring(7)}`,
      transactionId: transactionId || null,
      userEmail: session.user.email,
      userId: session.user.email, // –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ userId
      amount: Number(amount),
      plan,
      status: status || 'success',
      paymentMethod,
      description: description || `–ú—É–∑–∏—á–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è - ${plan} –ø–ª–∞–Ω`,
      recipientName: recipientName || '',
      occasion: occasion || '',
      createdAt: new Date(),
      updatedAt: new Date()
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–ª–∞—Ç–µ–∂ –¥–ª—è —ç—Ç–æ–≥–æ taskId –∏–ª–∏ orderId
    const existingPayment = await db.collection('payments').findOne({
      $or: [
        { taskId: taskId },
        { orderId: orderId }
      ]
    })

    let paymentId
    if (existingPayment) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂
      await db.collection('payments').updateOne(
        { _id: existingPayment._id },
        { $set: { ...paymentData, updatedAt: new Date() } }
      )
      paymentId = existingPayment._id
      console.log(`üí∞ –ü–ª–∞—Ç–µ–∂ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${taskId || orderId}:`, paymentData.amount, '‚Ç¥')
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
      const result = await db.collection('payments').insertOne(paymentData)
      paymentId = result.insertedId
      console.log(`üí∞ –ù–æ–≤–∏–π –ø–ª–∞—Ç–µ–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è ${taskId || orderId}:`, paymentData.amount, '‚Ç¥')
    }

    return NextResponse.json({
      success: true,
      paymentId,
      message: '–ü–ª–∞—Ç–µ–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ'
    })

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:', error)
    return NextResponse.json(
      { error: '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É' },
      { status: 500 }
    )
  }
}