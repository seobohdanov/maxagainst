import { NextRequest, NextResponse } from 'next/server'
import crypto from 'crypto'
import clientPromise from '@/lib/mongodb'

const LIQPAY_PRIVATE_KEY = process.env.LIQPAY_PRIVATE_KEY || ''

export async function POST(request: NextRequest) {
  try {
    const body = await request.text()
    const params = new URLSearchParams(body)
    
    const data = params.get('data')
    const signature = params.get('signature')
    
    if (!data || !signature) {
      return NextResponse.json({ error: '–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ' }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    const expectedSignature = crypto
      .createHmac('sha1', LIQPAY_PRIVATE_KEY)
      .update(data)
      .digest('base64')

    if (signature !== expectedSignature) {
      return NextResponse.json({ error: '–ù–µ–≤—ñ—Ä–Ω–∞ –ø—ñ–¥–ø–∏—Å' }, { status: 400 })
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const decodedData = JSON.parse(Buffer.from(data, 'base64').toString())
    
    console.log('üí∞ LiqPay callback –æ—Ç—Ä–∏–º–∞–Ω–æ:', decodedData)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try {
      const client = await clientPromise
      const db = client.db()

      const paymentData: any = {
        orderId: decodedData.order_id,
        transactionId: decodedData.transaction_id || decodedData.payment_id,
        amount: Number(decodedData.amount),
        currency: decodedData.currency || 'UAH',
        status: decodedData.status,
        paymentMethod: 'liqpay',
        description: decodedData.description || '–ú—É–∑–∏—á–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è',
        liqpayData: decodedData, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç LiqPay
        createdAt: new Date(),
        updatedAt: new Date()
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ order_id (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑—å —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º)
      if (decodedData.order_id) {
        const greeting = await db.collection('greetings').findOne({
          taskId: { $regex: decodedData.order_id.replace('order_', '') }
        })
        
        if (greeting) {
          paymentData.userId = greeting.userId
          paymentData.userEmail = greeting.userId // –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ userId = email
          paymentData.taskId = greeting.taskId
          paymentData.recipientName = greeting.recipientName
          paymentData.occasion = greeting.occasion
          paymentData.plan = greeting.plan
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–ª–∞—Ç–µ–∂
      const existingPayment = await db.collection('payments').findOne({
        $or: [
          { orderId: decodedData.order_id },
          { transactionId: decodedData.transaction_id || decodedData.payment_id }
        ]
      })

      if (existingPayment) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂
        await db.collection('payments').updateOne(
          { _id: existingPayment._id },
          { $set: { ...paymentData, updatedAt: new Date() } }
        )
        console.log(`üí∞ –ü–ª–∞—Ç–µ–∂ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î: ${decodedData.order_id}, —Å—Ç–∞—Ç—É—Å: ${decodedData.status}`)
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        await db.collection('payments').insertOne(paymentData)
        console.log(`üí∞ –ù–æ–≤–∏–π –ø–ª–∞—Ç–µ–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î: ${decodedData.order_id}, —Å—É–º–∞: ${decodedData.amount} ${decodedData.currency}`)
      }

    } catch (dbError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –≤ –ë–î:', dbError)
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    if (decodedData.status === 'success') {
      // –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
      console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø—ñ—à–Ω–∏–π:', decodedData.order_id)
      return NextResponse.json({ success: true })
    } else if (decodedData.status === 'failure') {
      // –ü–ª–∞—Ç–µ–∂ –Ω–µ—É—Å–ø–µ—à–µ–Ω
      console.log('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –≤–¥–∞–≤—Å—è:', decodedData.order_id)
      return NextResponse.json({ success: false, error: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –≤–¥–∞–≤—Å—è' })
    } else {
      // –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã (waiting, etc.)
      console.log('‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–æ–±—Ü—ñ:', decodedData.order_id, '—Å—Ç–∞—Ç—É—Å:', decodedData.status)
      return NextResponse.json({ success: true, status: decodedData.status })
    }

  } catch (error) {
    console.error('‚ùå LiqPay callback –ø–æ–º–∏–ª–∫–∞:', error)
    return NextResponse.json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback' }, { status: 500 })
  }
} 