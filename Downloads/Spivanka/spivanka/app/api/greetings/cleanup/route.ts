import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import clientPromise from '@/lib/mongodb'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const client = await clientPromise
    const db = client.db()
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000)
    
    const [greetingsResult, statusResult] = await Promise.all([
      // –£–¥–∞–ª—è–µ–º –∏–∑ greetings –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      db.collection('greetings').deleteMany({
        userId: session.user.email,
        updatedAt: { $lt: oneHourAgo },
        status: { $in: ['PENDING', 'TEXT_SUCCESS', 'FIRST_SUCCESS'] }
      }),
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ generation_status –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      db.collection('generation_status').deleteMany({
        userId: session.user.email,
        updatedAt: { $lt: oneHourAgo },
        status: { $in: ['PENDING', 'TEXT_SUCCESS', 'FIRST_SUCCESS'] }
      })
    ])

    const totalDeleted = greetingsResult.deletedCount + statusResult.deletedCount
    
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${totalDeleted} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:`, session.user.email)
    
    return NextResponse.json({
      success: true,
      deletedCount: totalDeleted,
      message: `–û—á–∏—â–µ–Ω–æ ${totalDeleted} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤`
    })
  } catch (error) {
    console.error('Error cleaning up old records:', error)
    return NextResponse.json(
      { error: 'Failed to cleanup old records' },
      { status: 500 }
    )
  }
} 