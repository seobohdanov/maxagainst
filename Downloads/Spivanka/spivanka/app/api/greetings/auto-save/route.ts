import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { saveGreeting, getGreetingById } from '@/services/databaseService'
import clientPromise from '@/lib/mongodb'
import type { Greeting } from '@/types'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession()
    
    if (!session?.user?.email) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const body = await request.json()
    const { taskId, ...greetingData } = body

    if (!taskId) {
      return NextResponse.json(
        { error: 'TaskId is required' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ç–∞–∫–∏–º taskId –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingGreeting = await getGreetingById(taskId)
    
    if (existingGreeting && existingGreeting.userId === session.user.email) {
      console.log('‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è')
      return NextResponse.json({
        success: true,
        greeting: existingGreeting,
        message: 'Greeting already exists'
      })
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    const savedGreeting = await saveGreeting({
      ...greetingData,
      taskId,
      userId: session.user.email
    })

    console.log('‚úÖ –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:', savedGreeting.id)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if (greetingData.totalPrice && greetingData.plan) {
      try {
        const client = await clientPromise
        const db = client.db()

        const paymentData = {
          taskId: taskId,
          orderId: `order_${taskId}`,
          userEmail: session.user.email,
          userId: session.user.email,
          amount: Number(greetingData.totalPrice),
          plan: greetingData.plan,
          status: 'success', // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—á–∏—Ç–∞–µ–º –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–º
          paymentMethod: greetingData.paymentMethod || 'fondy',
          description: `–ú—É–∑–∏—á–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è ${greetingData.recipientName} - ${greetingData.plan} –ø–ª–∞–Ω`,
          recipientName: greetingData.recipientName || '',
          occasion: greetingData.occasion || '',
          createdAt: new Date(),
          updatedAt: new Date()
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–ª–∞—Ç–µ–∂
        const existingPayment = await db.collection('payments').findOne({
          taskId: taskId,
          userId: session.user.email
        })

        if (!existingPayment) {
          await db.collection('payments').insertOne(paymentData)
          console.log(`üí∞ –ü–ª–∞—Ç–µ–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${paymentData.amount} ‚Ç¥ –¥–ª—è ${greetingData.recipientName}`)
        } else {
          console.log(`üí∞ –ü–ª–∞—Ç–µ–∂ –≤–∂–µ —ñ—Å–Ω—É—î –¥–ª—è taskId: ${taskId}`)
        }

      } catch (paymentError) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:', paymentError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø–ª–∞—Ç–µ–∂ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      }
    }

    return NextResponse.json({
      success: true,
      greeting: savedGreeting
    })
  } catch (error) {
    console.error('Error auto-saving greeting:', error)
    return NextResponse.json(
      { error: 'Failed to auto-save greeting' },
      { status: 500 }
    )
  }
} 