import { NextRequest, NextResponse } from 'next/server'
import { generateCoverArt } from '@/services/coverArtService'

export async function POST(request: NextRequest) {
  try {
    const { formData, text, plan } = await request.json()

    if (!formData || !text || !plan) {
      return NextResponse.json(
        { error: '–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏, —Ç–µ–∫—Å—Ç –∞–±–æ –ø–ª–∞–Ω' },
        { status: 400 }
      )
    }

    console.log('üñºÔ∏è –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏...')
    console.log('üìã –ü–ª–∞–Ω:', plan)
    console.log('üìù –¢–µ–∫—Å—Ç:', text.substring(0, 100))

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–ª–æ–∂–∫—É
    const coverUrl = await generateCoverArt(formData, text, plan)

    console.log('‚úÖ –û–±–∫–ª–∞–¥–∏–Ω–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞:', coverUrl)

    return NextResponse.json({ 
      success: true, 
      coverUrl: coverUrl
    })

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏:', error)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let errorMessage = '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏'
    let statusCode = 500
    
    if (error instanceof Error) {
      if (error.message.includes('API key') || error.message.includes('OPENAI_API_KEY')) {
        errorMessage = '–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenAI API. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
      } else if (error.message.includes('rate limit') || error.message.includes('too many requests')) {
        errorMessage = '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä–æ—Ö–∏ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'
      } else if (error.message.includes('network') || error.message.includes('fetch')) {
        errorMessage = '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'
      } else {
        errorMessage = error.message
      }
    }
    
    return NextResponse.json(
      { 
        success: false,
        error: errorMessage,
        details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      },
      { status: statusCode }
    )
  }
} 