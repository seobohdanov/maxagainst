import { NextRequest, NextResponse } from 'next/server'
import { getGenerationStatus } from '@/services/sunoService'
import clientPromise from '@/lib/mongodb'

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const taskId = searchParams.get('taskId')

  if (!taskId) {
    return NextResponse.json({ error: 'TaskId is required' }, { status: 400 })
  }

  console.log(`üîó SSE –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–ª—è taskId: ${taskId}`)

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SSE
  const headers = {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Cache-Control'
  }

  const stream = new ReadableStream({
    async start(controller) {
      let lastStatus: string | null = null
      let attempts = 0
      let isClosed = false
      const maxAttempts = 240 // 20 –º–∏–Ω—É—Ç (240 * 5 —Å–µ–∫—É–Ω–¥)

      const sendEvent = (data: any) => {
        if (isClosed) {
          console.log(`‚ö†Ô∏è SSE: —Å–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –¥–ª—è taskId: ${taskId}`)
          return
        }
        
        try {
          if (data.data) {
            data.data.openaiCoverStatus = data.data.openaiCoverStatus || ''
            data.data.openaiCoverUrl = data.data.openaiCoverUrl || ''
            data.data.openaiCoverError = data.data.openaiCoverError || ''
          }
          const event = `data: ${JSON.stringify(data)}\n\n`
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –µ—â–µ –æ—Ç–∫—Ä—ã—Ç
          if (controller.desiredSize !== null) {
            controller.enqueue(new TextEncoder().encode(event))
          } else {
            console.log(`‚ö†Ô∏è SSE: –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∏–π –¥–ª—è taskId: ${taskId}`)
            isClosed = true
          }
        } catch (error) {
          console.error(`‚ùå SSE –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–ª—è taskId: ${taskId}:`, error)
          isClosed = true
        }
      }

      const closeConnection = () => {
        if (!isClosed) {
          isClosed = true
          try {
            if (controller.desiredSize !== null) {
              controller.close()
            }
          } catch (error) {
            console.error(`‚ùå SSE –ø–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è taskId: ${taskId}:`, error)
          }
        }
      }

      const checkStatus = async () => {
        if (isClosed) {
          return
        }

        try {
          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          let result: any = null
          
          try {
            const client = await clientPromise
            const db = client.db()
            const statusRecord = await db.collection('generation_status').findOne({ taskId })
            
            if (statusRecord) {
              console.log(`üì° SSE: –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –≤ –ë–î –¥–ª—è taskId: ${taskId} - ${statusRecord.status}`)
              result = {
                success: true,
                status: statusRecord.status,
                text: statusRecord.text || '',
                musicUrl: statusRecord.musicUrl || '',
                secondMusicUrl: statusRecord.secondMusicUrl || '',
                coverUrl: statusRecord.coverUrl || '',
                formData: statusRecord.formData || {}
              }
            }
          } catch (dbError) {
            console.log(`‚ö†Ô∏è SSE: –ø–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∑ –ë–î –¥–ª—è taskId: ${taskId}:`, dbError)
          }
          
          // –ï—Å–ª–∏ –≤ –ë–î –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–π API
          if (!result) {
            console.log(`üì° SSE: –ø–µ—Ä–µ–≤—ñ—Ä—è—é –∑–æ–≤–Ω—ñ—à–Ω—ñ–π API –¥–ª—è taskId: ${taskId}`)
            result = await getGenerationStatus(taskId)
          } else {
            console.log(`üì° SSE: —Å—Ç–∞—Ç—É—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î —Ç–∞ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–º—É API –¥–ª—è taskId: ${taskId}`)
          }
          
          if (result && result.success && result.status) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (lastStatus !== result.status) {
              console.log(`üì° SSE: –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É ${result.status} –¥–ª—è taskId: ${taskId}`)
              sendEvent({
                type: 'status_update',
                taskId,
                status: result.status,
                data: result
              })
              lastStatus = result.status
            } else {
              console.log(`üì° SSE: —Å—Ç–∞—Ç—É—Å –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è ${result.status} –¥–ª—è taskId: ${taskId}`)
            }

            // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (result.status === 'SUCCESS') {
              console.log(`‚úÖ SSE: –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è taskId: ${taskId}`)
              sendEvent({
                type: 'generation_complete',
                taskId,
                status: result.status,
                data: result
              })
              closeConnection()
              return
            }

            // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (result.status === 'FAILED' || result.status === 'GENERATE_AUDIO_FAILED') {
              console.log(`‚ùå SSE: –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è –¥–ª—è taskId: ${taskId}, —Å—Ç–∞—Ç—É—Å: ${result.status}`)
              sendEvent({
                type: result.status === 'GENERATE_AUDIO_FAILED' ? 'generate_audio_failed' : 'generation_failed',
                taskId,
                status: result.status,
                data: result
              })
              closeConnection()
              return
            }
          }

          attempts++
          
          // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
          if (attempts >= maxAttempts) {
            console.log(`‚è∞ SSE: —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ –¥–ª—è taskId: ${taskId}`)
            sendEvent({
              type: 'timeout',
              taskId,
              message: 'Generation timeout'
            })
            closeConnection()
            return
          }

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: —á–∞—â–µ –≤ –Ω–∞—á–∞–ª–µ, —Ä–µ–∂–µ –ø–æ—Ç–æ–º
          const interval = attempts < 10 ? 2000 : attempts < 30 ? 3000 : 5000
          if (!isClosed) {
            setTimeout(checkStatus, interval)
          }
        } catch (error) {
          console.error(`‚ùå SSE –ø–æ–º–∏–ª–∫–∞ –¥–ª—è taskId: ${taskId}:`, error)
          sendEvent({
            type: 'error',
            taskId,
            error: error instanceof Error ? error.message : 'Unknown error'
          })
          closeConnection()
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
      sendEvent({
        type: 'connected',
        taskId,
        message: 'SSE connection established'
      })

      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      setTimeout(() => {
        if (!isClosed) {
          checkStatus()
        }
      }, 100)
    }
  })

  return new Response(stream, { headers })
} 