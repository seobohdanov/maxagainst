import { NextRequest, NextResponse } from 'next/server'
import clientPromise from '@/lib/mongodb'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import type { GenerationStatus, Plan } from '@/types'
import { handleApiError, validateFormData, calculatePlanPrice } from '@/lib/utils'
import { ObjectId } from 'mongodb'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { 
      taskId, 
      status, 
      type, 
      musicUrl, 
      coverUrl, 
      secondMusicUrl, 
      data,
      formData,
      text,
      openaiCoverStatus,
      openaiCoverUrl,
      openaiCoverError,
      action
    } = body

    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    if (action === 'get' && taskId) {
      return await getGenerationStatus(taskId)
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!taskId) {
      return NextResponse.json(
        { success: false, error: 'TaskId –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' },
        { status: 400 }
      )
    }

    console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–ª—è taskId: ${taskId}`)
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${status}`)
    console.log(`üìù –¢–µ–∫—Å—Ç: ${text?.substring(0, 100)}`)
    console.log(`üñºÔ∏è –û–±–∫–ª–∞–¥–∏–Ω–∫–∞: ${coverUrl}`)
    console.log(`üéµ –ú—É–∑–∏–∫–∞: ${musicUrl}`)
    console.log(`üéµ –î—Ä—É–≥–∞ –º—É–∑–∏–∫–∞: ${secondMusicUrl}`)
    console.log(`üñºÔ∏è OpenAI —Å—Ç–∞—Ç—É—Å:`, openaiCoverStatus)
    console.log(`üñºÔ∏è OpenAI –æ–±–∫–ª–∞–¥–∏–Ω–∫–∞:`, openaiCoverUrl)
    console.log(`üñºÔ∏è OpenAI –ø–æ–º–∏–ª–∫–∞:`, openaiCoverError)

    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ formData
    const session = await getServerSession(authOptions)
    const userId = session?.user?.email || formData?.userId || data?.userId

    const client = await clientPromise
    const db = client.db()
    
    const statusRecord = {
      taskId,
      userId: userId || '',
      status: status as GenerationStatus,
      type: type || 'generation',
      musicUrl: musicUrl || '',
      coverUrl: coverUrl || '',
      secondMusicUrl: secondMusicUrl || '',
      openaiCoverStatus: openaiCoverStatus || '',
      openaiCoverUrl: openaiCoverUrl || '',
      openaiCoverError: openaiCoverError || '',
      data: data || {},
      formData: formData || {},
      text: text || '',
      updatedAt: new Date()
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await db.collection('generation_status').updateOne(
      { taskId },
      { 
        $set: statusRecord,
        $setOnInsert: { createdAt: new Date() }
      },
      { upsert: true }
    )

    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î: ${status}`)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    if (shouldSaveGreeting(status) && formData && text && userId) {
      await saveOrUpdateGreeting(db, taskId, status, statusRecord)
    }

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å SUCCESS, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –¥–∞—à–±–æ—Ä–¥–µ
    if (status === 'SUCCESS') {
      await db.collection('greetings').updateOne(
        { taskId },
        { 
          $set: { 
            status: 'SUCCESS',
            updatedAt: new Date()
          }
        }
      )
    }

    return NextResponse.json({ success: true, taskId, status })

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error)
    const errorResponse = handleApiError(error)
    return NextResponse.json(errorResponse, { status: 500 })
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const taskId = searchParams.get('taskId')

    if (!taskId) {
      return NextResponse.json(
        { success: false, error: 'TaskId –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' },
        { status: 400 }
      )
    }

    return await getGenerationStatus(taskId)

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error)
    const errorResponse = handleApiError(error)
    return NextResponse.json(errorResponse, { status: 500 })
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function getGenerationStatus(taskId: string) {
  try {
    const client = await clientPromise
    const db = client.db()
    
    const statusRecord = await db.collection('generation_status').findOne({ taskId })
    
    if (!statusRecord) {
      return NextResponse.json(
        { success: false, error: '–°—Ç–∞—Ç—É—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' }, 
        { status: 404 }
      )
    }

    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î: ${statusRecord.status}`)
    return NextResponse.json({
      success: true,
      ...statusRecord
    })

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑ –ë–î:', error)
    return NextResponse.json(
      { success: false, error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É' },
      { status: 500 }
    )
  }
}

function shouldSaveGreeting(status: GenerationStatus): boolean {
  return ['TEXT_SUCCESS', 'FIRST_SUCCESS', 'SUCCESS'].includes(status)
}

async function saveOrUpdateGreeting(db: any, taskId: string, status: GenerationStatus, statusRecord: any) {
  try {
    const userId = statusRecord.userId
    if (!userId) {
      console.log('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π userId, –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è')
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settingsCollection = db.collection('settings')
    const settings = await settingsCollection.findOne({})
    const basicPrice = settings?.basicPlanPrice || 100
    const premiumPrice = settings?.premiumPlanPrice || 200

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    const plan = statusRecord.formData?.plan || 'basic'
    const greetingData = {
      taskId,
      recipientName: statusRecord.formData?.recipientName || '',
      occasion: statusRecord.formData?.occasion || '',
      relationship: statusRecord.formData?.relationship || '',
      personalDetails: statusRecord.formData?.personalDetails || '',
      musicStyle: statusRecord.formData?.musicStyle || '',
      mood: statusRecord.formData?.mood || '',
      greetingLanguage: statusRecord.formData?.greetingLanguage || 'uk',
      text: statusRecord.text || '',
      plan: plan,
      totalPrice: calculatePlanPrice(plan, basicPrice, premiumPrice),
      paymentMethod: 'liqpay',
      musicUrl: statusRecord.musicUrl || '',
      secondMusicUrl: statusRecord.secondMusicUrl || '',
      coverUrl: statusRecord.coverUrl || '',
      allowSharing: false,
      userId,
      status,
      updatedAt: new Date()
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    const validation = validateFormData(statusRecord.formData)
    if (!validation.isValid) {
      console.log('‚ö†Ô∏è –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏:', validation.errors)
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –±–∞–∑–µ
    const existingGreeting = await db.collection('greetings').findOne({ taskId, userId })
    
    if (!existingGreeting) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      await db.collection('greetings').insertOne({
        ...greetingData,
        createdAt: new Date()
      })
      console.log(`‚úÖ –ù–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å—ñ ${status}`)
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      await db.collection('greetings').updateOne(
        { taskId, userId },
        { $set: greetingData }
      )
      console.log(`‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å—ñ ${status}`)
    }

  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å—ñ ${status}:`, error)
  }
} 