import { NextRequest, NextResponse } from 'next/server'
import clientPromise from '@/lib/mongodb'

// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å callback –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const callbackData = new Map<string, any>()

export async function POST(request: NextRequest) {
  try {
    console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ POST –∑–∞–ø–∏—Ç –Ω–∞ callback endpoint')
    const data = await request.json()
    console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ callback –≤—ñ–¥ Suno API:', JSON.stringify(data, null, 2))

    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å taskId –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç
    let taskId = null
    
    if (data.data && data.data.task_id) {
      taskId = data.data.task_id
    } else if (data.data && data.data.taskId) {
      taskId = data.data.taskId
    } else if (data.task_id) {
      taskId = data.task_id
    } else if (data.taskId) {
      taskId = data.taskId
    }

    if (taskId) {
      callbackData.set(taskId, data)
      console.log(`‚úÖ Callback –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è taskId: ${taskId}`)
      console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö callback'—ñ–≤: ${callbackData.size}`)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      try {
        const client = await clientPromise
        const db = client.db()
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–æ–∂–∫—É –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        let coverUrl = ''
        if (data.data && data.data.source_image_url) {
          coverUrl = data.data.source_image_url
          console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –∑ callback:', coverUrl)
        }
        
        const callbackRecord = {
          taskId,
          callbackData: data,
          coverUrl,
          receivedAt: new Date()
        }
        
        await db.collection('suno_callbacks').updateOne(
          { taskId },
          { $set: callbackRecord },
          { upsert: true }
        )
        
        console.log(`üíæ Callback –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î –¥–ª—è taskId: ${taskId}`)
      } catch (dbError) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è callback –≤ –ë–î:', dbError)
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ taskId –≤ callback –¥–∞–Ω–∏—Ö:', data)
      console.log('‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ callback –¥–∞–Ω–∏—Ö')
    }

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const taskId = searchParams.get('taskId')

  console.log(`üîç GET –∑–∞–ø–∏—Ç –Ω–∞ callback endpoint –¥–ª—è taskId: ${taskId}`)
  console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö callback'—ñ–≤: ${callbackData.size}`)

  if (!taskId) {
    console.log('‚ùå Task ID –Ω–µ –Ω–∞–¥–∞–Ω–æ')
    return NextResponse.json({ error: 'Task ID is required' }, { status: 400 })
  }

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  try {
    const client = await clientPromise
    const db = client.db()
    
    const callbackRecord = await db.collection('suno_callbacks').findOne({ taskId })
    
    if (callbackRecord) {
      console.log(`üì§ –ü–æ–≤–µ—Ä—Ç–∞—é callback –¥–∞–Ω—ñ –∑ –ë–î –¥–ª—è taskId: ${taskId}`)
      return NextResponse.json(callbackRecord)
    }
  } catch (dbError) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è callback –∑ –ë–î:', dbError)
  }

  // Fallback –Ω–∞ –ø–∞–º—è—Ç—å
  const data = callbackData.get(taskId)
  if (data) {
    console.log(`üì§ –ü–æ–≤–µ—Ä—Ç–∞—é callback –¥–∞–Ω—ñ –∑ –ø–∞–º'—è—Ç—ñ –¥–ª—è taskId: ${taskId}`)
    return NextResponse.json(data)
  }

  console.log(`‚ùå Callback –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è taskId: ${taskId}`)
  console.log(`üîç –î–æ—Å—Ç—É–ø–Ω—ñ taskId:`, Array.from(callbackData.keys()))
  return NextResponse.json({ error: 'Callback data not found' }, { status: 404 })
} 