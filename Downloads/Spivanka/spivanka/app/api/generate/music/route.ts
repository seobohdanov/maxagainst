import { NextRequest, NextResponse } from 'next/server'
import { generateMusic } from '@/services/sunoService'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'

export async function POST(request: NextRequest) {
  try {
    const { text, formData } = await request.json()

    if (!text || !formData) {
      return NextResponse.json(
        { error: '–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–µ–∫—Å—Ç –∞–±–æ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏' },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è userId
    const session = await getServerSession(authOptions)
    const userId = session?.user?.email

    console.log('üéµ –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—É–∑–∏–∫–∏...')
    console.log('üìù –¢–µ–∫—Å—Ç:', text)
    console.log('üìã –î–∞–Ω—ñ —Ñ–æ—Ä–º–∏:', formData)
    console.log('üë§ UserId:', userId)

    // –î–æ–±–∞–≤–ª—è–µ–º userId –∫ formData
    const enrichedFormData = {
      ...formData,
      userId: userId || ''
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É (–ø–æ–ª—É—á–∞–µ–º taskId)
    const result = await generateMusic(text, enrichedFormData)

    console.log('‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ:', result)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
    if (result.taskId) {
      processGenerationInBackground(result.taskId, text, enrichedFormData).catch(error => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏:', error)
      })
      
      console.log('üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è taskId:', result.taskId)
    }

    return NextResponse.json({ 
      success: true, 
      taskId: result.taskId,
      type: result.type
    })

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—É–∑–∏–∫–∏:', error)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let errorMessage = '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—É–∑–∏–∫–∏'
    let statusCode = 500
    
    if (error instanceof Error) {
      if (error.message.includes('insufficient') || error.message.includes('credits')) {
        errorMessage = '–ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ —Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
        statusCode = 503 // Service Unavailable
      } else if (error.message.includes('rate limit') || error.message.includes('too many requests')) {
        errorMessage = '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä–æ—Ö–∏ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'
        statusCode = 429 // Too Many Requests
      } else if (error.message.includes('invalid') || error.message.includes('bad request')) {
        errorMessage = '–ü–æ–º–∏–ª–∫–∞ –≤ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–µ–∫—Å—Ç —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'
        statusCode = 400 // Bad Request
      } else if (error.message.includes('network') || error.message.includes('fetch')) {
        errorMessage = '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
        statusCode = 503 // Service Unavailable
      } else {
        errorMessage = error.message
      }
    }
    
    return NextResponse.json(
      { 
        success: false,
        error: errorMessage,
        details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      },
      { status: statusCode }
    )
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
async function processGenerationInBackground(taskId: string, text: string, formData: any) {
  console.log(`üîÑ –ó–∞–ø—É—Å–∫–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –æ–±—Ä–æ–±–∫—É –¥–ª—è taskId: ${taskId}`)
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
    const { getGenerationStatus, saveGenerationStatus } = await import('@/services/sunoService')
    
    let attempts = 0
    const maxAttempts = 120 // 20 –º–∏–Ω—É—Ç —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 —Å–µ–∫—É–Ω–¥
    
    while (attempts < maxAttempts) {
      try {
        console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É (—Å–ø—Ä–æ–±–∞ ${attempts + 1}/${maxAttempts})...`)
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç Suno API
        const statusResult = await getGenerationStatus(taskId)
        
        if (statusResult.success && statusResult.status) {
          console.log(`üìã –°—Ç–∞—Ç—É—Å: ${statusResult.status}`)
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          await saveGenerationStatus(taskId, statusResult, formData, text)
          console.log(`üíæ –°—Ç–∞—Ç—É—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${statusResult.status}`)
          
          // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã—Ö–æ–¥–∏–º
          if (statusResult.status === 'SUCCESS') {
            console.log(`‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è taskId: ${taskId}`, statusResult)
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–ª–æ–∂–∫—É –¥–ª—è Basic –ø–ª–∞–Ω–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            let finalCoverUrl = statusResult.coverUrl || ''
            if (!finalCoverUrl) {
              try {
                console.log('üñºÔ∏è –ì–µ–Ω–µ—Ä—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—É –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –¥–ª—è Basic –ø–ª–∞–Ω—É')
                const { generateCoverArt } = await import('@/services/coverArtService')
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω –∏–∑ formData –∏–ª–∏ 'basic' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                const plan = formData.plan || 'basic'
                finalCoverUrl = await generateCoverArt(formData, text, plan)
                console.log(`üñºÔ∏è –û–±–∫–ª–∞–¥–∏–Ω–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–ª–∞–Ω—É ${plan}:`, finalCoverUrl)
              } catch (coverError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏:', coverError)
                finalCoverUrl = ''
              }
            }
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ')
            
            return
          }
          
          // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤—ã—Ö–æ–¥–∏–º
          if (statusResult.status === 'FAILED' || statusResult.status === 'GENERATE_AUDIO_FAILED') {
            console.error(`‚ùå –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è –¥–ª—è taskId: ${taskId}, —Å—Ç–∞—Ç—É—Å: ${statusResult.status}`)
            return
          }
        }
        
        attempts++
        await new Promise(resolve => setTimeout(resolve, 15000)) // 15 —Å–µ–∫—É–Ω–¥
      } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É (—Å–ø—Ä–æ–±–∞ ${attempts}):`, error)
        attempts++
        await new Promise(resolve => setTimeout(resolve, 15000))
      }
    }
    
    console.error(`‚ùå –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ –¥–ª—è taskId: ${taskId}`)
    
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –¥–ª—è taskId: ${taskId}`, error)
  }
} 