import { NextRequest, NextResponse } from 'next/server'
import { getGenerationStatus } from '@/services/sunoService'
import clientPromise from '@/lib/mongodb'

const SUNO_API_KEY = process.env.NEXT_PUBLIC_SUNO_API_KEY
const SUNO_API_URL = 'https://apibox.erweima.ai'

export async function GET(request: NextRequest) {
  try {
    console.log('üîç –ó–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å—Ç–∞—Ç—É—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—É–∑–∏–∫–∏')
    
    // –ü–æ–ª—É—á–∞–µ–º taskId –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { searchParams } = new URL(request.url)
    const taskId = searchParams.get('taskId')
    
    // –ï—Å–ª–∏ taskId –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    if (!taskId) {
      try {
        const client = await clientPromise
        const db = client.db()
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –ë–î
        const statuses = await db.collection('generation_status')
          .find({
            status: { 
              $nin: ['SUCCESS', 'FAILED', 'GENERATE_AUDIO_FAILED'] 
            },
            createdAt: { 
              $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            }
          })
          .sort({ createdAt: -1 })
          .limit(50)
          .toArray()
        
        return NextResponse.json({
          success: true,
          statuses: statuses.map(status => ({
            taskId: status.taskId,
            status: status.status,
            formData: status.formData,
            text: status.text,
            createdAt: status.createdAt,
            updatedAt: status.updatedAt
          }))
        })
      } catch (dbError) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑ –ë–î:', dbError)
        return NextResponse.json({ 
          success: false, 
          error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤',
          statuses: []
        }, { status: 500 })
      }
    }
    
    if (!SUNO_API_KEY) {
      return NextResponse.json({ error: 'Suno API key not configured' }, { status: 500 })
    }
    
    console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å—Ç–∞—Ç—É—Å –¥–ª—è taskId: ${taskId}`)
    
    const result = await getGenerationStatus(taskId)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–Ω—ã–π
    if (!result || result.error) {
      console.log('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥ Suno API –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π:', result)
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      let errorMessage = '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥ Suno API'
      let statusCode = 404
      
      if (result?.error) {
        if (result.error.includes('insufficient') || result.error.includes('credits')) {
          errorMessage = '–ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ —Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
          statusCode = 503 // Service Unavailable
        } else if (result.error.includes('rate limit') || result.error.includes('too many requests')) {
          errorMessage = '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä–æ—Ö–∏ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'
          statusCode = 429 // Too Many Requests
        } else if (result.error.includes('invalid') || result.error.includes('bad request')) {
          errorMessage = '–ü–æ–º–∏–ª–∫–∞ –≤ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ taskId —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'
          statusCode = 400 // Bad Request
        } else if (result.error.includes('network') || result.error.includes('fetch')) {
          errorMessage = '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
          statusCode = 503 // Service Unavailable
        } else {
          errorMessage = result.error
        }
      }
      
      return NextResponse.json({ 
        success: false, 
        error: errorMessage,
        details: result?.details || result?.error
      }, { status: statusCode })
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try {
      const client = await clientPromise
      const db = client.db()
      const statusRecord = await db.collection('generation_status').findOne({ taskId })
      
      if (statusRecord) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Suno API —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
        result.formData = statusRecord.formData || {}
        result.text = statusRecord.text || ''
        console.log('‚úÖ –î–∞–Ω—ñ –∑ –ë–î –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É')
        console.log('üìù –¢–µ–∫—Å—Ç –∑ –ë–î:', result.text?.substring(0, 100))
      } else {
        console.log('‚ö†Ô∏è –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ç—ñ–ª—å–∫–∏ –¥–∞–Ω—ñ –∑ Suno API')
      }
    } catch (dbError) {
      console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –ë–î:', dbError)
      // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ –∏–∑ Suno API
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ TEXT_SUCCESS
    if (result.status === 'TEXT_SUCCESS') {
      console.log('üìù –°—Ç–∞—Ç—É—Å TEXT_SUCCESS, —Ç–µ–∫—Å—Ç:', result.text?.substring(0, 100))
      console.log('üìù –ü–æ–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è TEXT_SUCCESS:', JSON.stringify(result, null, 2))
    }
    
    // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≤ processGenerationInBackground –Ω–∞ –±—ç–∫–µ–Ω–¥–µ

    return NextResponse.json(result)
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É:', error)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let errorMessage = '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    let statusCode = 500
    
    if (error instanceof Error) {
      if (error.message.includes('network') || error.message.includes('fetch')) {
        errorMessage = '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
        statusCode = 503 // Service Unavailable
      } else if (error.message.includes('timeout')) {
        errorMessage = '–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
        statusCode = 408 // Request Timeout
      } else {
        errorMessage = error.message
      }
    }
    
    return NextResponse.json({ 
      success: false,
      error: errorMessage,
      details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    }, { status: statusCode })
  }
}

function getStatusMessage(status: string): string {
  switch (status) {
    case 'pending':
      return '–ó–∞–≤–¥–∞–Ω–Ω—è –æ—á—ñ–∫—É—î –æ–±—Ä–æ–±–∫–∏'
    case 'processing':
      return '–ú—É–∑–∏–∫–∞ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è...'
    case 'complete':
    case 'finished':
      return '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
    case 'failed':
      return '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è'
    default:
      return '–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å'
  }
} 