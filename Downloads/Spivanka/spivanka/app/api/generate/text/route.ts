import { NextRequest, NextResponse } from 'next/server'
import { generateGreetingText } from '@/services/geminiService'
import type { FormData } from '@/types'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const formData: FormData = body.formData

    if (!formData) {
      return NextResponse.json(
        { success: false, error: 'Form data is required' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!formData.recipientName || !formData.occasion || !formData.relationship) {
      return NextResponse.json(
        { success: false, error: 'Missing required fields: recipientName, occasion, relationship' },
        { status: 400 }
      )
    }

    console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É –¥–ª—è:', {
      recipientName: formData.recipientName,
      occasion: formData.occasion,
      relationship: formData.relationship,
      language: formData.greetingLanguage
    })

    const generatedText = await generateGreetingText(formData)

    if (!generatedText || generatedText.trim().length === 0) {
      return NextResponse.json(
        { success: false, error: 'Generated text is empty' },
        { status: 500 }
      )
    }

    console.log('‚úÖ –¢–µ–∫—Å—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ, –¥–æ–≤–∂–∏–Ω–∞:', generatedText.length)

    return NextResponse.json({
      success: true,
      text: generatedText
    })
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É:', error)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let errorMessage = '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É'
    let statusCode = 500
    
    if (error instanceof Error) {
      if (error.message.includes('API key') || error.message.includes('GEMINI_API_KEY')) {
        errorMessage = '–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
        statusCode = 500
      } else if (error.message.includes('–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤') || error.message.includes('rate limit') || error.message.includes('too many requests')) {
        errorMessage = '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä–æ—Ö–∏ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'
        statusCode = 429
      } else if (error.message.includes('–ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π') || error.message.includes('overloaded')) {
        errorMessage = '–°–µ—Ä–≤–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.'
        statusCode = 503
      } else if (error.message.includes('network') || error.message.includes('fetch')) {
        errorMessage = '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
        statusCode = 503
      } else if (error.message.includes('invalid') || error.message.includes('bad request')) {
        errorMessage = '–ü–æ–º–∏–ª–∫–∞ –≤ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º—É —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'
        statusCode = 400
      } else {
        errorMessage = error.message
      }
    }
    
    return NextResponse.json(
      { 
        success: false,
        error: errorMessage,
        details: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      },
      { status: statusCode }
    )
  }
} 