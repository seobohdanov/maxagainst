import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import clientPromise from '@/lib/mongodb'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    console.log('üóëÔ∏è –û—á–∏—â–∞—é –∫—ç—à –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è:', session.user.email)

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const client = await clientPromise
    const db = client.db('spivanka')
    const collection = db.collection('calendar_cache')
    
    // –£–¥–∞–ª—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await collection.deleteOne({ userEmail: session.user.email })
    
    if (result.deletedCount > 0) {
      console.log('‚úÖ –ö—ç—à –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ—á–∏—â–µ–Ω')
      return NextResponse.json({
        success: true,
        message: '–ö—ç—à –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ—á–∏—â–µ–Ω'
      })
    } else {
      console.log('‚ÑπÔ∏è –ö—ç—à –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return NextResponse.json({
        success: true,
        message: '–ö—ç—à –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω'
      })
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error)
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 })
  }
} 