import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import clientPromise from '@/lib/mongodb'
import { ObjectId } from 'mongodb'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —É Google
async function revokeGooglePermissions(accessToken: string) {
  try {
    console.log('üîÑ –í—ñ–¥–∫–ª–∏–∫–∞—é –¥–æ–∑–≤–æ–ª–∏ —É Google...')
    
    const response = await fetch('https://oauth2.googleapis.com/revoke', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        token: accessToken,
      }),
    })

    if (response.ok) {
      console.log('‚úÖ –î–æ–∑–≤–æ–ª–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ —É Google')
      return true
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—ñ–≤ —É Google:', response.status, response.statusText)
      return false
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—ñ–≤ —É Google:', error)
    return false
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∞
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.email) {
      return NextResponse.json(
        { success: false, error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π' },
        { status: 401 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (session.user.email !== 'seobohdanov@gmail.com') {
      return NextResponse.json(
        { success: false, error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' },
        { status: 403 }
      )
    }

    const { id } = await params

    if (!id) {
      return NextResponse.json(
        { success: false, error: 'ID –∑–≥–æ–¥–∏ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' },
        { status: 400 }
      )
    }

    const client = await clientPromise
    const db = client.db()
    const consentCollection = db.collection('user_consents')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ
    const existingConsent = await consentCollection.findOne({ _id: new ObjectId(id) })
    
    if (!existingConsent) {
      return NextResponse.json(
        { success: false, error: '–ó–≥–æ–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const userEmail = existingConsent.email

    // –£–¥–∞–ª—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
    const result = await consentCollection.deleteOne({ _id: new ObjectId(id) })

    if (result.deletedCount === 0) {
      return NextResponse.json(
        { success: false, error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–≥–æ–¥–∏' },
        { status: 500 }
      )
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (userEmail) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        const tokensCollection = db.collection('user_tokens')
        const userTokens = await tokensCollection.find({ email: userEmail.toLowerCase() }).toArray()
        
        // –û—Ç–∑—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É Google –¥–ª—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (const token of userTokens) {
          if (token.accessToken) {
            await revokeGooglePermissions(token.accessToken)
          }
        }

        // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const tokensResult = await tokensCollection.deleteMany({ email: userEmail.toLowerCase() })
        console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${tokensResult.deletedCount} —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è ${userEmail}`)

        // –£–¥–∞–ª—è–µ–º –∫—ç—à –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const calendarCacheCollection = db.collection('calendar_cache')
        const cacheResult = await calendarCacheCollection.deleteMany({ userEmail: userEmail.toLowerCase() })
        console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${cacheResult.deletedCount} –∑–∞–ø–∏—Å—ñ–≤ –∫–µ—à—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è ${userEmail}`)

        // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è)
        const calendarTokensCollection = db.collection('calendar_tokens')
        const calendarTokensResult = await calendarTokensCollection.deleteMany({ userEmail: userEmail.toLowerCase() })
        console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${calendarTokensResult.deletedCount} —Ç–æ–∫–µ–Ω—ñ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è ${userEmail}`)

      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤\'—è–∑–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', error)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
      }
    }

    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑–≥–æ–¥—É –∑ ID: ${id} —Ç–∞ –ø–æ–≤'—è–∑–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è ${userEmail || '–Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'}`)

    return NextResponse.json({
      success: true,
      message: '–ó–≥–æ–¥—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'
    })

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–≥–æ–¥–∏:', error)
    return NextResponse.json(
      { success: false, error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–≥–æ–¥–∏' },
      { status: 500 }
    )
  }
} 