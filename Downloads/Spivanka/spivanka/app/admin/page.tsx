'use client'

import { useSession, signIn } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { useEffect, useState } from 'react'
import { toast } from 'react-hot-toast'

interface AdminStats {
  totalUsers: number
  totalGreetings: number
  totalPayments: number
  totalRevenue: number
  recentPayments: any[]
  publicExamples: any[]
  totalPromoCodes: number
  activePromoCodes: number
  promoUsageStats: {
    promoCode: string
    usageCount: number
    totalDiscount: number
  }[]
  totalConsents: number
  termsConsents: number
  marketingConsents: number
}

interface AppSettings {
  appName: string
  appLogo: string
  basicPlanPrice: number
  premiumPlanPrice: number
  maintenanceMode: boolean
}

interface TextBlock {
  _id?: string
  key: string
  title: string
  description: string
  icon: string
  order: number
  isActive: boolean
  createdAt: Date
  updatedAt: Date
}

interface PromoCode {
  _id?: string
  code: string
  discount: number
  description: string
  isActive: boolean
  usageLimit: number
  usageCount: number
  validFrom: Date
  validUntil: Date
  createdAt: Date
  updatedAt: Date
}

export default function AdminPage() {
  const { data: session, status } = useSession()
  const router = useRouter()
  const [stats, setStats] = useState<AdminStats | null>(null)
  const [settings, setSettings] = useState<AppSettings | null>(null)
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState('dashboard')
  const [promoCodes, setPromoCodes] = useState<PromoCode[]>([])
  const [showPromoForm, setShowPromoForm] = useState(false)
  const [editingPromo, setEditingPromo] = useState<PromoCode | null>(null)
  const [textBlocks, setTextBlocks] = useState<TextBlock[]>([])
  const [showTextBlockForm, setShowTextBlockForm] = useState(false)
  const [editingTextBlock, setEditingTextBlock] = useState<TextBlock | null>(null)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∞
  useEffect(() => {
    if (status === 'loading') return

    console.log('üîç Admin check:', {
      status,
      userEmail: session?.user?.email,
      isAdmin: session?.user?.email === 'seobohdanov@gmail.com'
    })

    if (session?.user?.email === 'seobohdanov@gmail.com') {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      console.log('‚úÖ Admin access granted, loading data...')
      loadAdminData()
    } else if (session?.user?.email) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –Ω–µ –∞–¥–º–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ
      console.log('‚õî Access denied for user:', session.user.email)
      setLoading(false)
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
      console.log('üîê User not authenticated, showing login page')
      setLoading(false)
    }
  }, [session, status])

  const loadAdminData = async () => {
    try {
      setLoading(true)
      console.log('üìä Loading admin data...')
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsResponse = await fetch('/api/admin/stats')
      console.log('üìä Stats response:', statsResponse.status, statsResponse.statusText)
      if (statsResponse.ok) {
        const statsData = await statsResponse.json()
        setStats(statsData)
        console.log('‚úÖ Stats loaded:', statsData)
      } else {
        const error = await statsResponse.text()
        console.error('‚ùå Stats error:', error)
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settingsResponse = await fetch('/api/admin/settings')
      console.log('‚öôÔ∏è Settings response:', settingsResponse.status, settingsResponse.statusText)
      if (settingsResponse.ok) {
        const settingsData = await settingsResponse.json()
        setSettings(settingsData)
        console.log('‚úÖ Settings loaded:', settingsData)
      } else {
        const error = await settingsResponse.text()
        console.error('‚ùå Settings error:', error)
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã
      const promoResponse = await fetch('/api/admin/promocodes')
      console.log('üéüÔ∏è Promo response:', promoResponse.status, promoResponse.statusText)
      if (promoResponse.ok) {
        const promoData = await promoResponse.json()
        setPromoCodes(promoData)
        console.log('‚úÖ Promo codes loaded:', promoData)
      } else {
        const error = await promoResponse.text()
        console.error('‚ùå Promo codes error:', error)
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
      const textBlocksResponse = await fetch('/api/admin/text-blocks')
      console.log('üìù Text blocks response:', textBlocksResponse.status, textBlocksResponse.statusText)
      if (textBlocksResponse.ok) {
        const textBlocksData = await textBlocksResponse.json()
        setTextBlocks(textBlocksData)
        console.log('‚úÖ Text blocks loaded:', textBlocksData)
      } else {
        const error = await textBlocksResponse.text()
        console.error('‚ùå Text blocks error:', error)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∫–∏:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
    } finally {
      setLoading(false)
    }
  }

  const loadPromoCodes = async () => {
    try {
      const response = await fetch('/api/admin/promocodes')
      if (response.ok) {
        const data = await response.json()
        setPromoCodes(data)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')
    }
  }

  const savePromoCode = async (promoData: Partial<PromoCode>) => {
    try {
      const method = editingPromo ? 'PUT' : 'POST'
      const url = editingPromo ? `/api/admin/promocodes/${editingPromo._id}` : '/api/admin/promocodes'
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(promoData)
      })

      if (response.ok) {
        toast.success(editingPromo ? '–ü—Ä–æ–º–æ–∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω' : '–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω')
        setShowPromoForm(false)
        setEditingPromo(null)
        loadPromoCodes()
      } else {
        const error = await response.json()
        throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error)
      toast.error(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞')
    }
  }

  const deletePromoCode = async (promoId: string) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥?')) return

    try {
      const response = await fetch(`/api/admin/promocodes/${promoId}`, {
        method: 'DELETE'
      })

      if (response.ok) {
        toast.success('–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω')
        loadPromoCodes()
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error)
      toast.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞')
    }
  }

  const togglePromoCodeStatus = async (promoId: string, isActive: boolean) => {
    try {
      const response = await fetch(`/api/admin/promocodes/${promoId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ isActive })
      })

      if (response.ok) {
        toast.success(`–ü—Ä–æ–º–æ–∫–æ–¥ ${isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}`)
        loadPromoCodes()
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error)
      toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞')
    }
  }

  const updateSettings = async (newSettings: Partial<AppSettings>) => {
    try {
      const response = await fetch('/api/admin/settings', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newSettings)
      })

      if (response.ok) {
        setSettings(prev => prev ? { ...prev, ...newSettings } : null)
        toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error)
      toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫')
    }
  }

  const deleteExample = async (exampleId: string) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä?')) return

    try {
      const response = await fetch(`/api/admin/examples/${exampleId}`, {
        method: 'DELETE'
      })

      if (response.ok) {
        toast.success('–ü—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω')
        loadAdminData() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞:', error)
      toast.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞')
    }
  }

  const loadTextBlocks = async () => {
    try {
      const response = await fetch('/api/admin/text-blocks')
      if (response.ok) {
        const data = await response.json()
        setTextBlocks(data)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤')
    }
  }

  const saveTextBlock = async (textBlockData: Partial<TextBlock>) => {
    try {
      const method = editingTextBlock ? 'PUT' : 'POST'
      const url = editingTextBlock ? `/api/admin/text-blocks/${editingTextBlock._id}` : '/api/admin/text-blocks'
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(textBlockData)
      })

      if (response.ok) {
        toast.success(editingTextBlock ? '–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω' : '–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —Å–æ–∑–¥–∞–Ω')
        setShowTextBlockForm(false)
        setEditingTextBlock(null)
        loadTextBlocks()
      } else {
        const error = await response.json()
        throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞:', error)
      toast.error(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞')
    }
  }

  const deleteTextBlock = async (textBlockId: string) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫?')) return

    try {
      const response = await fetch(`/api/admin/text-blocks/${textBlockId}`, {
        method: 'DELETE'
      })

      if (response.ok) {
        toast.success('–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —É–¥–∞–ª–µ–Ω')
        loadTextBlocks()
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞:', error)
      toast.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞')
    }
  }

  const toggleTextBlockStatus = async (textBlockId: string, isActive: boolean) => {
    try {
      const response = await fetch(`/api/admin/text-blocks/${textBlockId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ isActive })
      })

      if (response.ok) {
        toast.success(`–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ ${isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}`)
        loadTextBlocks()
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞:', error)
      toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞')
    }
  }

  if (status === 'loading' || loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...</p>
        </div>
      </div>
    )
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
  if (!session?.user?.email) {
    return <AdminLoginPage />
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –Ω–µ –∞–¥–º–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ
  if (session.user.email !== 'seobohdanov@gmail.com') {
    return <AdminAccessDeniedPage userEmail={session.user.email} />
  }

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center">
              <h1 className="text-2xl font-bold text-gray-900">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
              <span className="ml-4 px-3 py-1 bg-purple-100 text-purple-800 text-sm rounded-full">
                {settings?.appName || 'Spivanka'}
              </span>
            </div>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-600">
                –ü—Ä–∏–≤–µ—Ç, {session.user.name}
              </span>
              <button
                onClick={() => router.push('/')}
                className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors"
              >
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="mb-8">
          <nav className="flex flex-wrap gap-2 lg:gap-4">
            {[
              { id: 'dashboard', name: '–î–∞—à–±–æ—Ä–¥', icon: 'üìä' },
              { id: 'settings', name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', icon: '‚öôÔ∏è' },
              { id: 'examples', name: '–ü—Ä–∏–º–µ—Ä—ã', icon: 'üéµ' },
              { id: 'payments', name: '–ü–ª–∞—Ç–µ–∂–∏', icon: 'üí≥' },
              { id: 'users', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', icon: 'üë•' },
              { id: 'promocodes', name: '–ü—Ä–æ–º–æ–∫–æ–¥—ã', icon: 'üéüÔ∏è' },
              { id: 'textblocks', name: '–¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏', icon: 'üìù' },
              { id: 'marketing', name: '–†–æ–∑—Å–∏–ª–∫–∞', icon: 'üìß' },
              { id: 'consents', name: '–ó–≥–æ–¥–∏', icon: '‚úÖ' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center px-2 py-2 rounded-md text-xs lg:text-sm font-medium transition-colors whitespace-nowrap ${
                  activeTab === tab.id
                    ? 'bg-purple-100 text-purple-700'
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                <span className="mr-1 lg:mr-2">{tab.icon}</span>
                <span className="hidden sm:inline">{tab.name}</span>
                <span className="sm:hidden">{tab.name.substring(0, 3)}</span>
              </button>
            ))}
          </nav>
        </div>

        {/* –î–∞—à–±–æ—Ä–¥ */}
        {activeTab === 'dashboard' && stats && (
          <div className="space-y-6">
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
              <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <div className="p-2 bg-blue-100 rounded-lg">
                    <span className="text-2xl">üë•</span>
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</p>
                    <p className="text-2xl font-bold text-gray-900">{stats.totalUsers}</p>
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <div className="p-2 bg-green-100 rounded-lg">
                    <span className="text-2xl">üéµ</span>
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</p>
                    <p className="text-2xl font-bold text-gray-900">{stats.totalGreetings}</p>
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <div className="p-2 bg-yellow-100 rounded-lg">
                    <span className="text-2xl">üí≥</span>
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">–ü–ª–∞—Ç–µ–∂–∏</p>
                    <p className="text-2xl font-bold text-gray-900">{stats.totalPayments}</p>
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <div className="p-2 bg-purple-100 rounded-lg">
                    <span className="text-2xl">üí∞</span>
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">–î–æ—Ö–æ–¥</p>
                    <p className="text-2xl font-bold text-gray-900">{stats.totalRevenue} ‚Ç¥</p>
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <div className="p-2 bg-orange-100 rounded-lg">
                    <span className="text-2xl">üéüÔ∏è</span>
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">–ü—Ä–æ–º–æ–∫–æ–¥—ã</p>
                    <p className="text-2xl font-bold text-gray-900">{stats.totalPromoCodes}</p>
                    <p className="text-xs text-gray-500">–ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.activePromoCodes}</p>
                  </div>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <div className="p-2 bg-green-100 rounded-lg">
                    <span className="text-2xl">‚úÖ</span>
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">–ó–≥–æ–¥–∏</p>
                    <p className="text-2xl font-bold text-gray-900">{stats.totalConsents}</p>
                    <p className="text-xs text-gray-500">
                      –£–º–æ–≤–∏: {stats.termsConsents} | –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: {stats.marketingConsents}
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ */}
            {stats.promoUsageStats.length > 0 && (
              <div className="bg-white rounded-lg shadow">
                <div className="px-6 py-4 border-b">
                  <h3 className="text-lg font-medium text-gray-900">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã</h3>
                </div>
                <div className="p-6">
                  <div className="grid gap-4">
                    {stats.promoUsageStats.map((promo, index) => (
                      <div key={promo.promoCode} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-3">
                          <div className="flex items-center justify-center w-8 h-8 bg-purple-100 text-purple-800 rounded-full text-sm font-bold">
                            {index + 1}
                          </div>
                          <div>
                            <h4 className="font-bold text-gray-900">{promo.promoCode}</h4>
                            <p className="text-sm text-gray-600">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo.usageCount} —Ä–∞–∑</p>
                          </div>
                        </div>
                        <div className="text-right">
                          <p className="text-lg font-bold text-green-600">-{promo.totalDiscount}%</p>
                          <p className="text-xs text-gray-500">–û–±—â–∞—è —Å–∫–∏–¥–∫–∞</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏ */}
            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b">
                <h3 className="text-lg font-medium text-gray-900">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏</h3>
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">–°—É–º–º–∞</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">–î–∞—Ç–∞</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">–°—Ç–∞—Ç—É—Å</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {stats.recentPayments.map((payment, index) => (
                      <tr key={index}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {payment.userEmail}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {payment.amount} ‚Ç¥
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {new Date(payment.createdAt).toLocaleDateString('uk-UA')}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            payment.status === 'success' 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {payment.status}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        {activeTab === 'settings' && settings && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</label>
                  <input
                    type="text"
                    value={settings.appName}
                    onChange={(e) => setSettings(prev => prev ? {...prev, appName: e.target.value} : null)}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700">–õ–æ–≥–æ—Ç–∏–ø</label>
                  <div className="mt-1 flex items-center space-x-4">
                    {settings.appLogo && (
                      <div className="flex items-center space-x-2">
                        <img 
                          src={settings.appLogo} 
                          alt="–õ–æ–≥–æ—Ç–∏–ø" 
                          className="w-12 h-12 object-contain border rounded"
                        />
                        <button
                          type="button"
                          onClick={() => setSettings(prev => prev ? {...prev, appLogo: ''} : null)}
                          className="text-red-600 hover:text-red-800 text-sm"
                        >
                          –£–¥–∞–ª–∏—Ç—å
                        </button>
                      </div>
                    )}
                    <div className="flex-1">
                      <input
                        type="file"
                        accept="image/*"
                        onChange={async (e) => {
                          const file = e.target.files?.[0]
                          if (file) {
                            try {
                              const formData = new FormData()
                              formData.append('logo', file)
                              
                              const response = await fetch('/api/admin/upload-logo', {
                                method: 'POST',
                                body: formData
                              })
                              
                              if (response.ok) {
                                const data = await response.json()
                                setSettings(prev => prev ? {...prev, appLogo: data.fileUrl} : null)
                                toast.success('–õ–æ–≥–æ—Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω')
                              } else {
                                const error = await response.json()
                                toast.error(error.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞')
                              }
                            } catch (error) {
                              console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error)
                              toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞')
                            }
                          }
                        }}
                        className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-purple-50 file:text-purple-700 hover:file:bg-purple-100"
                      />
                      <p className="mt-1 text-xs text-gray-500">
                        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB
                      </p>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">–¶–µ–Ω–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ (‚Ç¥)</label>
                    <input
                      type="number"
                      value={settings.basicPlanPrice}
                      onChange={(e) => setSettings(prev => prev ? {...prev, basicPlanPrice: Number(e.target.value)} : null)}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700">–¶–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω–∞ (‚Ç¥)</label>
                    <input
                      type="number"
                      value={settings.premiumPlanPrice}
                      onChange={(e) => setSettings(prev => prev ? {...prev, premiumPlanPrice: Number(e.target.value)} : null)}
                      className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                    />
                  </div>
                </div>

                <div className="flex items-center">
                  <input
                    type="checkbox"
                    checked={settings.maintenanceMode}
                    onChange={(e) => setSettings(prev => prev ? {...prev, maintenanceMode: e.target.checked} : null)}
                    className="h-4 w-4 text-purple-600 border-gray-300 rounded"
                  />
                  <label className="ml-2 block text-sm text-gray-900">
                    –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (–æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
                  </label>
                </div>

                <button
                  onClick={() => updateSettings(settings)}
                  className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –ü—Ä–∏–º–µ—Ä—ã */}
        {activeTab === 'examples' && stats && (
          <div className="bg-white rounded-lg shadow">
            <div className="px-6 py-4 border-b">
              <h3 className="text-lg font-medium text-gray-900">–ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã</h3>
            </div>
            <div className="p-6">
              <div className="grid gap-4">
                {stats.publicExamples.map((example) => (
                  <div key={example.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex-1">
                      <h4 className="font-medium text-gray-900">{example.recipientName}</h4>
                      <p className="text-sm text-gray-600">{example.occasion} ‚Ä¢ {example.relationship}</p>
                      <p className="text-xs text-gray-500">
                        –°–æ–∑–¥–∞–Ω: {new Date(example.createdAt).toLocaleDateString('uk-UA')}
                      </p>
                    </div>
                    <div className="flex items-center space-x-2">
                      {example.musicUrl && (
                        <a
                          href={example.musicUrl}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="px-3 py-1 bg-blue-100 text-blue-700 rounded text-sm hover:bg-blue-200"
                        >
                          üéµ –ü—Ä–æ—Å–ª—É—à–∞—Ç—å
                        </a>
                      )}
                      <button
                        onClick={() => deleteExample(example.id)}
                        className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                      >
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫ */}
        {activeTab === 'payments' && (
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏</h3>
            <p className="text-gray-600">–ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö...</p>
          </div>
        )}

        {activeTab === 'users' && (
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h3>
            <p className="text-gray-600">–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>
          </div>
        )}

        {/* –ü—Ä–æ–º–æ–∫–æ–¥—ã */}
        {activeTab === 'promocodes' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b flex justify-between items-center">
                <h3 className="text-lg font-medium text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</h3>
                <button
                  onClick={() => {
                    setEditingPromo(null)
                    setShowPromoForm(true)
                  }}
                  className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                >
                  + –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
                </button>
              </div>
              
              <div className="p-6">
                <div className="grid gap-4">
                  {promoCodes.map((promo) => (
                    <div key={promo._id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3">
                          <h4 className="font-bold text-lg text-gray-900">{promo.code}</h4>
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            promo.isActive 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {promo.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                          </span>
                          <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                            -{promo.discount}%
                          </span>
                        </div>
                        <p className="text-sm text-gray-600 mt-1">{promo.description}</p>
                        <div className="text-xs text-gray-500 mt-2 space-y-1">
                          <div>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo.usageCount} / {promo.usageLimit === 0 ? '‚àû' : promo.usageLimit}</div>
                          <div>–î–µ–π—Å—Ç–≤—É–µ—Ç: {new Date(promo.validFrom).toLocaleDateString('uk-UA')} - {new Date(promo.validUntil).toLocaleDateString('uk-UA')}</div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <button
                          onClick={() => togglePromoCodeStatus(promo._id!, !promo.isActive)}
                          className={`px-3 py-1 rounded text-sm ${
                            promo.isActive
                              ? 'bg-red-100 text-red-700 hover:bg-red-200'
                              : 'bg-green-100 text-green-700 hover:bg-green-200'
                          }`}
                        >
                          {promo.isActive ? 'üîí –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : 'üîì –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                        </button>
                        <button
                          onClick={() => {
                            setEditingPromo(promo)
                            setShowPromoForm(true)
                          }}
                          className="px-3 py-1 bg-blue-100 text-blue-700 rounded text-sm hover:bg-blue-200"
                        >
                          ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                        <button
                          onClick={() => deletePromoCode(promo._id!)}
                          className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                        >
                          üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                      </div>
                    </div>
                  ))}
                  
                  {promoCodes.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      <p>–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                      <p className="text-sm">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ */}
        {activeTab === 'textblocks' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b flex justify-between items-center">
                <h3 className="text-lg font-medium text-gray-900">–¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h3>
                <button
                  onClick={() => {
                    setEditingTextBlock(null)
                    setShowTextBlockForm(true)
                  }}
                  className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                >
                  ‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫
                </button>
              </div>
              
              <div className="p-6">
                <div className="grid gap-4">
                  {textBlocks.map((block) => (
                    <div key={block._id} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-4">
                          <div className="text-2xl">{block.icon}</div>
                          <div>
                            <h4 className="font-bold text-gray-900">{block.title}</h4>
                            <p className="text-sm text-gray-600">{block.description}</p>
                            <div className="flex items-center space-x-2 mt-1">
                              <span className="text-xs text-gray-500">–ö–ª—é—á: {block.key}</span>
                              <span className="text-xs text-gray-500">–ü–æ—Ä—è–¥–æ–∫: {block.order}</span>
                              <span className={`px-2 py-1 text-xs rounded-full ${
                                block.isActive 
                                  ? 'bg-green-100 text-green-800' 
                                  : 'bg-red-100 text-red-800'
                              }`}>
                                {block.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                              </span>
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => toggleTextBlockStatus(block._id!, !block.isActive)}
                            className={`px-3 py-1 rounded text-sm ${
                              block.isActive 
                                ? 'bg-red-100 text-red-700 hover:bg-red-200' 
                                : 'bg-green-100 text-green-700 hover:bg-green-200'
                            }`}
                          >
                            {block.isActive ? 'üîí –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : 'üîì –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                          </button>
                          <button
                            onClick={() => {
                              setEditingTextBlock(block)
                              setShowTextBlockForm(true)
                            }}
                            className="px-3 py-1 bg-blue-100 text-blue-700 rounded text-sm hover:bg-blue-200"
                          >
                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                          </button>
                          <button
                            onClick={() => deleteTextBlock(block._id!)}
                            className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200"
                          >
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {textBlocks.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      <p>–¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                      <p className="text-sm">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ */}
        {activeTab === 'marketing' && (
          <div className="space-y-6">
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-center">
                <span className="text-blue-600 mr-2">üìß</span>
                <div className="text-sm text-blue-800">
                  <strong>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞</strong>
                  <br />
                  –í—ñ–¥–ø—Ä–∞–≤–ª—è–π—Ç–µ email –ª–∏—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ –∑–≥–æ–¥–æ—é –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
                </div>
              </div>
            </div>

            <div className="flex justify-center">
              <a
                href="/admin/marketing"
                className="bg-pink-600 text-white px-6 py-3 rounded-lg hover:bg-pink-700 transition-colors"
              >
                –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ä–æ–∑—Å–∏–ª–∫–∏
              </a>
            </div>
          </div>
        )}

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è–º–∏ */}
        {activeTab === 'consents' && (
          <div className="space-y-6">
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="flex items-center">
                <span className="text-green-600 mr-2">‚úÖ</span>
                <div className="text-sm text-green-800">
                  <strong>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–≥–æ–¥–∞–º–∏</strong>
                  <br />
                  –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç—É–π—Ç–µ –∑–≥–æ–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö
                </div>
              </div>
            </div>

            <div className="flex justify-center space-x-4">
              <a
                href="/admin/consents"
                className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors"
              >
                –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–≥–æ–¥
              </a>

            </div>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ */}
      {showPromoForm && (
        <PromoCodeForm
          promo={editingPromo}
          onSave={savePromoCode}
          onCancel={() => {
            setShowPromoForm(false)
            setEditingPromo(null)
          }}
        />
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ */}
      {showTextBlockForm && (
        <TextBlockForm
          textBlock={editingTextBlock}
          onSave={saveTextBlock}
          onCancel={() => {
            setShowTextBlockForm(false)
            setEditingTextBlock(null)
          }}
        />
      )}
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
interface PromoCodeFormProps {
  promo: PromoCode | null
  onSave: (data: Partial<PromoCode>) => void
  onCancel: () => void
}

const PromoCodeForm: React.FC<PromoCodeFormProps> = ({ promo, onSave, onCancel }) => {
  const [formData, setFormData] = useState({
    code: promo?.code || '',
    discount: promo?.discount || 10,
    description: promo?.description || '',
    isActive: promo?.isActive ?? true,
    usageLimit: promo?.usageLimit || 0,
    validFrom: promo?.validFrom ? new Date(promo.validFrom).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],
    validUntil: promo?.validUntil ? new Date(promo.validUntil).toISOString().split('T')[0] : new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.code.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞')
      return
    }

    if (formData.discount < 1 || formData.discount > 100) {
      toast.error('–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1% –¥–æ 100%')
      return
    }

    if (new Date(formData.validFrom) >= new Date(formData.validUntil)) {
      toast.error('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞')
      return
    }

    onSave({
      code: formData.code.toUpperCase().trim(),
      discount: formData.discount,
      description: formData.description.trim(),
      isActive: formData.isActive,
      usageLimit: formData.usageLimit,
      validFrom: new Date(formData.validFrom),
      validUntil: new Date(formData.validUntil)
    })
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl max-w-2xl w-full p-6 relative max-h-[90vh] overflow-y-auto">
        <button
          onClick={onCancel}
          className="absolute top-4 right-4 text-gray-400 hover:text-gray-600"
        >
          ‚úï
        </button>

        <div className="mb-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            {promo ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'}
          </h2>
          <p className="text-gray-600">
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ö–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ *
              </label>
              <input
                type="text"
                value={formData.code}
                onChange={(e) => setFormData(prev => ({ ...prev, code: e.target.value }))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="–ù–û–í–´–ô2024"
                required
              />
              <p className="text-xs text-gray-500 mt-1">–ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä</p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%) *
              </label>
              <input
                type="number"
                min="1"
                max="100"
                value={formData.discount}
                onChange={(e) => setFormData(prev => ({ ...prev, discount: Number(e.target.value) }))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –û–ø–∏—Å–∞–Ω–∏–µ
            </label>
            <input
              type="text"
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              placeholder="–°–∫–∏–¥–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è *
              </label>
              <input
                type="date"
                value={formData.validFrom}
                onChange={(e) => setFormData(prev => ({ ...prev, validFrom: e.target.value }))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è *
              </label>
              <input
                type="date"
                value={formData.validUntil}
                onChange={(e) => setFormData(prev => ({ ...prev, validUntil: e.target.value }))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                required
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            </label>
            <input
              type="number"
              min="0"
              value={formData.usageLimit}
              onChange={(e) => setFormData(prev => ({ ...prev, usageLimit: Number(e.target.value) }))}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              placeholder="0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞"
            />
            <p className="text-xs text-gray-500 mt-1">0 –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</p>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              id="isActive"
              checked={formData.isActive}
              onChange={(e) => setFormData(prev => ({ ...prev, isActive: e.target.checked }))}
              className="h-4 w-4 text-purple-600 border-gray-300 rounded"
            />
            <label htmlFor="isActive" className="ml-2 block text-sm text-gray-900">
              –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            </label>
          </div>

          <div className="flex gap-4 pt-4">
            <button
              type="submit"
              className="flex-1 bg-purple-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-purple-700 transition-colors"
            >
              {promo ? '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'}
            </button>
            <button
              type="button"
              onClick={onCancel}
              className="flex-1 bg-gray-200 text-gray-700 py-3 px-6 rounded-lg font-semibold hover:bg-gray-300 transition-colors"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
interface TextBlockFormProps {
  textBlock: TextBlock | null
  onSave: (data: Partial<TextBlock>) => void
  onCancel: () => void
}

const TextBlockForm: React.FC<TextBlockFormProps> = ({ textBlock, onSave, onCancel }) => {
  const [formData, setFormData] = useState({
    key: textBlock?.key || '',
    title: textBlock?.title || '',
    description: textBlock?.description || '',
    icon: textBlock?.icon || 'üéµ',
    order: textBlock?.order || 1,
    isActive: textBlock?.isActive ?? true
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.key.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –±–ª–æ–∫–∞')
      return
    }

    if (!formData.title.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞')
      return
    }

    if (!formData.description.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞')
      return
    }

    onSave({
      key: formData.key.trim(),
      title: formData.title.trim(),
      description: formData.description.trim(),
      icon: formData.icon,
      order: formData.order,
      isActive: formData.isActive
    })
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl max-w-2xl w-full p-6 relative max-h-[90vh] overflow-y-auto">
        <button
          onClick={onCancel}
          className="absolute top-4 right-4 text-gray-400 hover:text-gray-600"
        >
          ‚úï
        </button>

        <div className="mb-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            {textBlock ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫' : '–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫'}
          </h2>
          <p className="text-gray-600">
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ö–ª—é—á –±–ª–æ–∫–∞ *
              </label>
              <input
                type="text"
                value={formData.key}
                onChange={(e) => setFormData(prev => ({ ...prev, key: e.target.value }))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="uniqueMusic"
                required
              />
              <p className="text-xs text-gray-500 mt-1">–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–ª–æ–∫–∞</p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ò–∫–æ–Ω–∫–∞
              </label>
              <input
                type="text"
                value={formData.icon}
                onChange={(e) => setFormData(prev => ({ ...prev, icon: e.target.value }))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="üéµ"
              />
              <p className="text-xs text-gray-500 mt-1">–≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ó–∞–≥–æ–ª–æ–≤–æ–∫ *
            </label>
            <input
              type="text"
              value={formData.title}
              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              placeholder="–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—É–∑–∏–∫–∞"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –û–ø–∏—Å–∞–Ω–∏–µ *
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              placeholder="Suno AI –≥–µ–Ω–µ—Ä—É—î –ø–æ–≤–Ω—ñ –º—É–∑–∏—á–Ω—ñ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—ó (~2 —Ö–≤) –ø—Ä–æ—Ç—è–≥–æ–º 1-3 —Ö–≤–∏–ª–∏–Ω"
              rows={3}
              required
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </label>
              <input
                type="number"
                min="1"
                value={formData.order}
                onChange={(e) => setFormData(prev => ({ ...prev, order: Number(e.target.value) }))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              />
              <p className="text-xs text-gray-500 mt-1">–ß–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –±–ª–æ–∫</p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –°—Ç–∞—Ç—É—Å
              </label>
              <div className="flex items-center space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="isActive"
                    checked={formData.isActive}
                    onChange={() => setFormData(prev => ({ ...prev, isActive: true }))}
                    className="mr-2"
                  />
                  –ê–∫—Ç–∏–≤–µ–Ω
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="isActive"
                    checked={!formData.isActive}
                    onChange={() => setFormData(prev => ({ ...prev, isActive: false }))}
                    className="mr-2"
                  />
                  –ù–µ–∞–∫—Ç–∏–≤–µ–Ω
                </label>
              </div>
            </div>
          </div>

          <div className="flex justify-end space-x-4 pt-6 border-t">
            <button
              type="button"
              onClick={onCancel}
              className="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
            >
              {textBlock ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
const AdminLoginPage: React.FC = () => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-indigo-800 to-blue-900 flex items-center justify-center p-4">
      <div className="max-w-md w-full">
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <div className="text-center mb-8">
            <div className="mx-auto w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mb-4">
              <span className="text-3xl">üîê</span>
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
            <p className="text-gray-600">–í—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</p>
          </div>

          <div className="space-y-6">
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-center">
                <span className="text-blue-600 mr-2">‚ÑπÔ∏è</span>
                <div className="text-sm text-blue-800">
                  <strong>–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</strong>
                  <br />
                  –í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                </div>
              </div>
            </div>

            <button
              onClick={() => signIn('google', { callbackUrl: '/admin' })}
              className="w-full flex items-center justify-center px-6 py-3 border border-gray-300 rounded-lg shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
            >
              <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
            </button>

            <div className="text-center">
              <a
                href="/"
                className="text-sm text-purple-600 hover:text-purple-700 transition-colors"
              >
                ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
              </a>
            </div>
          </div>
        </div>

        <div className="mt-8 text-center">
          <p className="text-white/80 text-sm">
            üéµ <strong>Spivanka</strong> - –°–æ–∑–¥–∞–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
          </p>
        </div>
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ
interface AdminAccessDeniedPageProps {
  userEmail: string
}

const AdminAccessDeniedPage: React.FC<AdminAccessDeniedPageProps> = ({ userEmail }) => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-red-900 via-pink-800 to-purple-900 flex items-center justify-center p-4">
      <div className="max-w-md w-full">
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <div className="text-center mb-8">
            <div className="mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4">
              <span className="text-3xl">‚õî</span>
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h1>
            <p className="text-gray-600">–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</p>
          </div>

          <div className="space-y-6">
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex items-center">
                <span className="text-red-600 mr-2">üö´</span>
                <div className="text-sm text-red-800">
                  <strong>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</strong>
                  <br />
                  –ê–∫–∫–∞—É–Ω—Ç <code className="bg-red-100 px-1 rounded">{userEmail}</code> –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                </div>
              </div>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-center">
                <span className="text-blue-600 mr-2">üí°</span>
                <div className="text-sm text-blue-800">
                  <strong>–ß—Ç–æ –¥–µ–ª–∞—Ç—å?</strong>
                  <br />
                  –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
                </div>
              </div>
            </div>

            <div className="flex space-x-3">
              <a
                href="/"
                className="flex-1 bg-gray-200 text-gray-700 py-3 px-4 rounded-lg font-semibold hover:bg-gray-300 transition-colors text-center"
              >
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </a>
              <button
                onClick={() => signIn('google', { callbackUrl: '/admin' })}
                className="flex-1 bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 transition-colors"
              >
                –î—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç
              </button>
            </div>
          </div>
        </div>

        <div className="mt-8 text-center">
          <p className="text-white/80 text-sm">
            üéµ <strong>Spivanka</strong> - –°–æ–∑–¥–∞–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
          </p>
        </div>
      </div>
    </div>
  )
} 