'use client'

import React, { useState } from 'react'
import { Session } from 'next-auth'
import { FormData } from '@/types'
import { ArrowLeft, Check, Star, Music, Sparkles } from 'lucide-react'
import { useAppSettings } from '@/hooks/useAppSettings'
import { useBrowserLanguage } from '@/hooks/useBrowserLanguage'
import Header from '@/components/Header'


interface ServicePageProps {
  session: Session | null
  currentStep: number
  formData: FormData
  setFormData: (data: FormData) => void
  generatedText: string
  setGeneratedText: (text: string) => void
  isGenerating: boolean
  selectedPlan: 'basic' | 'premium' | null
  setSelectedPlan: (plan: 'basic' | 'premium' | null) => void
  promoCode: string
  setPromoCode: (code: string) => void
  promoDiscount: number
  promoError: string
  isEditingText: boolean
  setIsEditingText: (editing: boolean) => void
  onBack: () => void
  onNextStep: () => void
  onPrevStep: () => void
  onGenerateText: () => void
  onRegenerateText: () => void
  onApplyPromo: () => void
  onPayment: () => void
}

export const ServicePage: React.FC<ServicePageProps> = ({
  session,
  currentStep,
  formData,
  setFormData,
  generatedText,
  setGeneratedText,
  isGenerating,
  selectedPlan,
  setSelectedPlan,
  promoCode,
  setPromoCode,
  promoDiscount,
  promoError,
  isEditingText,
  setIsEditingText,
  onBack,
  onNextStep,
  onPrevStep,
  onGenerateText,
  onRegenerateText,
  onApplyPromo,
  onPayment
}) => {
  const { settings } = useAppSettings()
  const { isRussianBrowser } = useBrowserLanguage()

  // –ï—Å–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω, –Ω–æ –±—Ä–∞—É–∑–µ—Ä –Ω–µ —Ä—É—Å—Å–∫–∏–π, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
  React.useEffect(() => {
    if (formData.greetingLanguage === 'ru' && !isRussianBrowser) {
      setFormData({ ...formData, greetingLanguage: 'uk' })
    }
  }, [isRussianBrowser, formData.greetingLanguage, setFormData])





  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-pink-600 to-indigo-800">
      {/* Header */}
      <Header 
        session={session}
        showBackButton={true}
        backButtonText="–ì–æ–ª–æ–≤–Ω–∞"
        onBackClick={onBack}
        pageTitle="üéµ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è"
        variant="minimal"
      />
      
      <div className="max-w-4xl mx-auto p-6">
        {/* Navigation */}
        <nav className="mb-8">
          
          {/* Progress indicator - —Ç–µ–ø–µ—Ä—å 3 —à–∞–≥–∞ */}
          <div className="flex items-center justify-center mb-8 px-4">
            <div className="flex items-center space-x-2 sm:space-x-4">
              {[1, 2, 3].map(step => (
                <div key={step} className="flex items-center">
                  <button
                    onClick={() => {
                      if (step <= currentStep) {
                        // Handle step navigation
                      }
                    }}
                    disabled={step > currentStep}
                    className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center text-xs sm:text-sm font-bold transition-all ${
                      step <= currentStep 
                        ? 'bg-pink-500 text-white hover:bg-pink-600 cursor-pointer' 
                        : 'bg-white/20 text-white/60 cursor-not-allowed'
                    }`}
                  >
                    {step}
                  </button>
                  {step < 3 && (
                    <div className={`w-4 sm:w-8 h-1 mx-1 sm:mx-2 ${
                      step < currentStep ? 'bg-pink-500' : 'bg-white/20'
                    }`} />
                  )}
                </div>
              ))}
            </div>
          </div>
        </nav>

        {/* Content */}
        <div className="bg-white rounded-3xl shadow-2xl p-8">

          {currentStep === 1 && (
            <div className="space-y-6">
              <div className="text-center mb-6">
                <h2 className="text-3xl font-bold text-gray-800 mb-2">
                  –ö—Ä–æ–∫ 1: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
                </h2>
                <p className="text-gray-600">
                  –†–æ–∑–∫–∞–∂—ñ—Ç—å –Ω–∞–º –ø—Ä–æ –ª—é–¥–∏–Ω—É —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å –º—É–∑–∏–∫–∏
                </p>
              </div>

              {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ */}
              <div className="space-y-6">
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –Ü–º'—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ *
                    </label>
                    <input
                      type="text"
                      value={formData.recipientName}
                      onChange={(e) => setFormData({...formData, recipientName: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent text-sm"
                      placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ú–∞—Ä—ñ—è"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ü—Ä–∏–≤—ñ–¥ *
                    </label>
                    <div className="space-y-1">
                      {formData.isCustomOccasion ? (
                        <input
                          type="text"
                          value={formData.occasion}
                          onChange={(e) => setFormData({...formData, occasion: e.target.value})}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent text-sm"
                          placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó"
                          required
                        />
                      ) : (
                        <select
                          value={formData.occasion}
                          onChange={(e) => setFormData({...formData, occasion: e.target.value})}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent text-sm"
                          required
                        >
                          <option value="">–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–≤—ñ–¥</option>
                          <option value="–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è">–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è</option>
                          <option value="–í–µ—Å—ñ–ª–ª—è">–í–µ—Å—ñ–ª–ª—è</option>
                          <option value="–Æ–≤—ñ–ª–µ–π">–Æ–≤—ñ–ª–µ–π</option>
                          <option value="–ù–æ–≤–∏–π —Ä—ñ–∫">–ù–æ–≤–∏–π —Ä—ñ–∫</option>
                          <option value="–†—ñ—á–Ω–∏—Ü—è">–†—ñ—á–Ω–∏—Ü—è</option>
                          <option value="–í–∏–ø—É—Å–∫–Ω–∏–π">–í–∏–ø—É—Å–∫–Ω–∏–π</option>
                          <option value="–•—Ä–µ—Å—Ç–∏–Ω–∏">–•—Ä–µ—Å—Ç–∏–Ω–∏</option>
                          <option value="–Ü–Ω—à–µ">–Ü–Ω—à–µ</option>
                        </select>
                      )}
                      
                      <div className="flex items-center space-x-2 mt-1">
                        <input
                          type="checkbox"
                          id="customOccasion"
                          checked={formData.isCustomOccasion || false}
                          onChange={(e) => setFormData({
                            ...formData, 
                            isCustomOccasion: e.target.checked,
                            occasion: e.target.checked ? formData.occasion : ''
                          })}
                          className="w-4 h-4 text-pink-600 bg-gray-100 border-gray-300 rounded focus:ring-pink-500 focus:ring-2"
                        />
                        <label htmlFor="customOccasion" className="text-sm text-gray-600">
                          –°–≤–æ—è –ø–æ–¥—ñ—è
                        </label>
                      </div>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –í–∞—à—ñ —Å—Ç–æ—Å—É–Ω–∫–∏ *
                    </label>
                    <select
                      value={formData.relationship}
                      onChange={(e) => setFormData({...formData, relationship: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent text-sm"
                      required
                    >
                      <option value="">–û–±–µ—Ä—ñ—Ç—å —Å—Ç–æ—Å—É–Ω–∫–∏</option>
                      <option value="–ú–∞–º–∞">–ú–∞–º–∞</option>
                      <option value="–¢–∞—Ç–æ">–¢–∞—Ç–æ</option>
                      <option value="–î—Ä—É–∂–∏–Ω–∞">–î—Ä—É–∂–∏–Ω–∞</option>
                      <option value="–ß–æ–ª–æ–≤—ñ–∫">–ß–æ–ª–æ–≤—ñ–∫</option>
                      <option value="–°–∏–Ω">–°–∏–Ω</option>
                      <option value="–î–æ—á–∫–∞">–î–æ—á–∫–∞</option>
                      <option value="–ë—Ä–∞—Ç">–ë—Ä–∞—Ç</option>
                      <option value="–°–µ—Å—Ç—Ä–∞">–°–µ—Å—Ç—Ä–∞</option>
                      <option value="–î—Ä—É–≥">–î—Ä—É–≥</option>
                      <option value="–ü–æ–¥—Ä—É–≥–∞">–ü–æ–¥—Ä—É–≥–∞</option>
                      <option value="–ö–æ–ª–µ–≥–∞">–ö–æ–ª–µ–≥–∞</option>
                      <option value="–Ü–Ω—à–µ">–Ü–Ω—à–µ</option>
                    </select>
                  </div>
                </div>

                {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - —è–∑—ã–∫ –∏ –≥–æ–ª–æ—Å */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ú–æ–≤–∞ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è *
                    </label>
                    <select
                      value={formData.greetingLanguage}
                      onChange={(e) => setFormData({...formData, greetingLanguage: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent text-sm"
                      required
                    >
                      <option value="uk">–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</option>
                      {isRussianBrowser && <option value="ru">–†—É—Å—Å–∫–∏–π</option>}
                      <option value="en">English</option>
                      <option value="pl">Polski</option>
                      <option value="de">Deutsch</option>
                      <option value="cz">ƒåe≈°tina</option>
                      <option value="ro">Rom√¢nƒÉ</option>
                      <option value="sk">Slovenƒçina</option>
                      <option value="hu">Magyar</option>
                      <option value="it">Italiano</option>
                      <option value="fr">Fran√ßais</option>
                      <option value="hr">Hrvatski</option>
                      <option value="pt">Portugu√™s</option>
                      <option value="es">Espa√±ol</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –¢–∏–ø –≥–æ–ª–æ—Å—É *
                    </label>
                    <select
                      value={formData.voiceType || 'female'}
                      onChange={(e) => setFormData({...formData, voiceType: e.target.value as 'female' | 'male' | 'duet'})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent text-sm"
                      required
                    >
                      <option value="female">–ñ—ñ–Ω–æ—á–∏–π –≥–æ–ª–æ—Å</option>
                      <option value="male">–ß–æ–ª–æ–≤—ñ—á–∏–π –≥–æ–ª–æ—Å</option>
                      <option value="duet">–î—É—ç—Ç (—á–æ–ª–æ–≤—ñ–∫ + –∂—ñ–Ω–∫–∞)</option>
                    </select>
                  </div>
                </div>

                {/* –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å—Ç–∏–ª—å */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ù–∞—Å—Ç—Ä—ñ–π *
                    </label>
                    <select
                      value={formData.mood}
                      onChange={(e) => setFormData({...formData, mood: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent text-sm"
                      required
                    >
                      <option value="">–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—Ä—ñ–π</option>
                      <option value="joyful">–†–∞–¥—ñ—Å–Ω–∏–π</option>
                      <option value="tender">–ù—ñ–∂–Ω–∏–π</option>
                      <option value="solemn">–£—Ä–æ—á–∏—Å—Ç–∏–π</option>
                      <option value="energetic">–ï–Ω–µ—Ä–≥—ñ–π–Ω–∏–π</option>
                    </select>
                  </div>

                  <div>
                    <div className="flex items-center space-x-2 mb-1">
                      <input
                        type="checkbox"
                        id="useStarStyle"
                        checked={formData.useStarStyle || false}
                        onChange={(e) => setFormData({...formData, useStarStyle: e.target.checked, musicStyle: '', artistStyle: ''})}
                        className="w-4 h-4 text-pink-600 bg-gray-100 border-gray-300 rounded focus:ring-pink-500 focus:ring-2"
                      />
                      <label htmlFor="useStarStyle" className="text-sm font-medium text-gray-700">
                        üåü –°—Ç–∏–ª—å –∑—ñ—Ä–æ–∫ –º—É–∑–∏–∫–∏
                      </label>
                    </div>
                    
                    {!formData.useStarStyle ? (
                      <select
                        value={formData.musicStyle}
                        onChange={(e) => setFormData({...formData, musicStyle: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent text-sm"
                        required
                      >
                        <option value="">–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å</option>
                        <option value="pop">Pop</option>
                        <option value="rock">Rock</option>
                        <option value="ballad">Ballad</option>
                        <option value="folk">Folk</option>
                        <option value="jazz">Jazz</option>
                        <option value="country">Country</option>
                        <option value="electronic">Electronic</option>
                        <option value="reggae">Reggae</option>
                        <option value="blues">Blues</option>
                        <option value="funk">Funk</option>
                      </select>
                    ) : (
                      <select
                        value={formData.artistStyle || ''}
                        onChange={(e) => setFormData({...formData, artistStyle: e.target.value, musicStyle: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent text-sm"
                        required
                      >
                        <option value="">–û–±–µ—Ä—ñ—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—è</option>
                        
                        {/* –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –∞—Ä—Ç–∏—Å—Ç—ã */}
                        <optgroup label="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ">
                          <option value="okean_elzy">–û–∫–µ–∞–Ω –ï–ª—å–∑–∏</option>
                          <option value="jamala">–î–∂–∞–º–∞–ª–∞</option>
                          <option value="tina_karol">–¢—ñ–Ω–∞ –ö–∞—Ä–æ–ª—å</option>
                        </optgroup>
                        
                        {/* –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–æ–ø-–∞—Ä—Ç–∏—Å—Ç—ã */}
                        <optgroup label="üé§ –ü–æ–ø">
                          <option value="taylor_swift">Taylor Swift</option>
                          <option value="ed_sheeran">Ed Sheeran</option>
                          <option value="adele">Adele</option>
                          <option value="billie_eilish">Billie Eilish</option>
                          <option value="bruno_mars">Bruno Mars</option>
                          <option value="dua_lipa">Dua Lipa</option>
                        </optgroup>
                        
                        {/* –†–æ–∫ –∞—Ä—Ç–∏—Å—Ç—ã */}
                        <optgroup label="üé∏ –†–æ–∫">
                          <option value="coldplay">Coldplay</option>
                          <option value="imagine_dragons">Imagine Dragons</option>
                          <option value="queen">Queen</option>
                        </optgroup>
                        
                        {/* R&B –∏ Soul */}
                        <optgroup label="üéµ R&B/Soul">
                          <option value="beyonce">Beyonc√©</option>
                          <option value="john_legend">John Legend</option>
                          <option value="alicia_keys">Alicia Keys</option>
                        </optgroup>
                        
                        {/* –ö–ª–∞—Å—Å–∏–∫–∞ –∏ –¥–∂–∞–∑ */}
                        <optgroup label="üéπ –î–∂–∞–∑">
                          <option value="frank_sinatra">Frank Sinatra</option>
                          <option value="ella_fitzgerald">Ella Fitzgerald</option>
                        </optgroup>
                      </select>
                    )}
                  </div>
                </div>

                {/* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ - —Å–≤–µ—Ä–Ω—É—Ç—ã–π –±–ª–æ–∫ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–µ—Ç–∞–ª—ñ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
                  </label>
                  <textarea
                    value={formData.personalDetails}
                    onChange={(e) => setFormData({...formData, personalDetails: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent text-sm"
                    rows={2}
                    placeholder="–•–æ–±—ñ, –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è, —â–æ –ª—é–±–∏—Ç—å..."
                  />
                </div>
              </div>

              <div className="flex justify-end pt-4">
                <button
                  onClick={onNextStep}
                  disabled={!formData.recipientName || !formData.occasion || !formData.relationship || !(formData.useStarStyle ? formData.artistStyle : formData.musicStyle) || !formData.mood || !formData.voiceType}
                  className="bg-gradient-to-r from-pink-500 to-purple-600 text-white px-8 py-3 rounded-xl font-bold hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  –î–∞–ª—ñ ‚Üí
                </button>
              </div>
            </div>
          )}

          {currentStep === 2 && (
            <div className="space-y-6">
              <div className="text-center mb-8">
                <h2 className="text-3xl font-bold text-gray-800 mb-4">
                  –ö—Ä–æ–∫ 2: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É
                </h2>
                <p className="text-gray-600">
                  –°—Ç–≤–æ—Ä–∏–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö
                </p>
              </div>

              {!generatedText ? (
                <div className="text-center space-y-6">
                  <div className="bg-gradient-to-r from-pink-50 to-purple-50 rounded-xl p-6">
                    <h3 className="font-bold text-gray-800 mb-4">–ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø–∏—Ç:</h3>
                    <div className="space-y-2 text-sm text-gray-600 text-left">
                      <p><strong>–î–ª—è –∫–æ–≥–æ:</strong> {formData.recipientName}</p>
                      <p><strong>–ü—Ä–∏–≤—ñ–¥:</strong> {formData.occasion}</p>
                      <p><strong>–°—Ç–æ—Å—É–Ω–∫–∏:</strong> {formData.relationship}</p>
                      <p><strong>–°—Ç–∏–ª—å:</strong> {formData.musicStyle}</p>
                      <p><strong>–ù–∞—Å—Ç—Ä—ñ–π:</strong> {formData.mood}</p>
                      <p><strong>–ú–æ–≤–∞:</strong> {formData.greetingLanguage === 'uk' ? '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞' : formData.greetingLanguage === 'ru' ? '–†—É—Å—Å–∫–∏–π' : formData.greetingLanguage}</p>
                      {formData.personalDetails && (
                        <p><strong>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–µ—Ç–∞–ª—ñ:</strong> {formData.personalDetails}</p>
                      )}
                    </div>
                  </div>

                  <button
                    onClick={onGenerateText}
                    disabled={isGenerating}
                    className="bg-gradient-to-r from-pink-500 to-purple-600 text-white px-8 py-4 rounded-xl font-bold hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed text-lg"
                  >
                    {isGenerating ? (
                      <div className="flex items-center gap-2">
                        <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                        –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç...
                      </div>
                    ) : (
                      'üéµ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è'
                    )}
                  </button>
                </div>
              ) : (
                <div className="space-y-6">
                  <div>
                    <div className="flex justify-between items-center mb-4">
                      <h3 className="font-bold text-gray-800">–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:</h3>
                      <div className="flex items-center gap-3">
                        <button
                          onClick={onRegenerateText}
                          disabled={isGenerating}
                          className="bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-4 py-2 rounded-lg font-medium hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed text-sm flex items-center gap-2"
                        >
                          {isGenerating ? (
                            <>
                              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                              –ì–µ–Ω–µ—Ä—É—î–º–æ...
                            </>
                          ) : (
                            <>
                              üîÑ –©–µ –≤–∞—Ä—ñ–∞–Ω—Ç
                            </>
                          )}
                        </button>
                        <button
                          onClick={() => setIsEditingText(!isEditingText)}
                          className="text-pink-600 hover:text-pink-700 text-sm font-medium"
                        >
                          {isEditingText ? '–ó–±–µ—Ä–µ–≥—Ç–∏' : '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏'}
                        </button>
                      </div>
                    </div>
                    
                    {isEditingText ? (
                      <textarea
                        value={generatedText}
                        onChange={(e) => setGeneratedText(e.target.value)}
                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                        rows={12}
                      />
                    ) : (
                      <div className="bg-gray-50 rounded-xl p-6 whitespace-pre-wrap text-gray-800">
                        {generatedText}
                      </div>
                    )}
                  </div>

                  <div className="flex justify-between pt-6">
                    <button
                      onClick={onPrevStep}
                      className="bg-gray-300 text-gray-700 px-8 py-3 rounded-xl font-bold hover:bg-gray-400 transition-all"
                    >
                      ‚Üê –ù–∞–∑–∞–¥
                    </button>
                    <button
                      onClick={onNextStep}
                      disabled={!generatedText}
                      className="bg-gradient-to-r from-pink-500 to-purple-600 text-white px-8 py-3 rounded-xl font-bold hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      –î–∞–ª—ñ ‚Üí
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}

          {currentStep === 3 && (
            <div className="space-y-6">
              <div className="text-center mb-8">
                <h2 className="text-3xl font-bold text-gray-800 mb-4">
                  –ö—Ä–æ–∫ 3: –í–∏–±—ñ—Ä —Ç–∞—Ä–∏—Ñ—É —Ç–∞ –æ–ø–ª–∞—Ç–∞
                </h2>
                <p className="text-gray-600">
                  –û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ —Ç–∞ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                </p>
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                <div className={`border-2 rounded-xl p-6 cursor-pointer transition-all ${
                  selectedPlan === 'basic' ? 'border-pink-500 bg-pink-50' : 'border-gray-200 hover:border-pink-300'
                }`}>
                  <div className="text-center">
                    <h3 className="text-xl font-bold text-gray-800 mb-2">–ë–∞–∑–æ–≤–∏–π</h3>
                    <div className="text-3xl font-bold text-gray-800 mb-4">{settings?.basicPlanPrice || 100}‚Ç¥</div>
                    <ul className="text-gray-600 mb-6 space-y-2">
                      <li>‚úì –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç</li>
                      <li>‚úì –ú—É–∑–∏—á–Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—è (~2 —Ö–≤)</li>
                      <li>‚úì –ë–∞–∑–æ–≤–∞ –æ–±–∫–ª–∞–¥–∏–Ω–∫–∞</li>
                      <li>‚úì MP3 —Ñ–∞–π–ª</li>
                    </ul>
                    <button
                      onClick={() => setSelectedPlan('basic')}
                      className={`w-full py-3 rounded-xl font-bold transition-all ${
                        selectedPlan === 'basic' 
                          ? 'bg-pink-500 text-white' 
                          : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                      }`}
                    >
                      {selectedPlan === 'basic' ? '–û–±—Ä–∞–Ω–æ' : '–û–±—Ä–∞—Ç–∏'}
                    </button>
                  </div>
                </div>

                <div className={`border-2 rounded-xl p-6 cursor-pointer transition-all ${
                  selectedPlan === 'premium' ? 'border-yellow-500 bg-yellow-50' : 'border-gray-200 hover:border-yellow-300'
                }`}>
                  <div className="text-center">
                    <div className="bg-yellow-400 text-gray-900 px-3 py-1 rounded-full text-sm font-bold mb-4 inline-block">
                      –ü–û–ü–£–õ–Ø–†–ù–ò–ô
                    </div>
                    <h3 className="text-xl font-bold text-gray-800 mb-2">–ü—Ä–µ–º—ñ—É–º</h3>
                    <div className="text-3xl font-bold text-gray-800 mb-4">{settings?.premiumPlanPrice || 200}‚Ç¥</div>
                    <ul className="text-gray-600 mb-6 space-y-2">
                      <li>‚úì –í—Å–µ –∑ –±–∞–∑–æ–≤–æ–≥–æ</li>
                      <li>‚úì –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –æ–±–∫–ª–∞–¥–∏–Ω–∫–∞ –∑ AI</li>
                      <li>‚úì –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º—É–∑–∏—á–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏</li>
                      <li>‚úì –í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π MP3</li>
                      <li>‚úì –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞</li>
                    </ul>
                    <button
                      onClick={() => setSelectedPlan('premium')}
                      className={`w-full py-3 rounded-xl font-bold transition-all ${
                        selectedPlan === 'premium' 
                          ? 'bg-yellow-500 text-gray-900' 
                          : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                      }`}
                    >
                      {selectedPlan === 'premium' ? '–û–±—Ä–∞–Ω–æ' : '–û–±—Ä–∞—Ç–∏'}
                    </button>
                  </div>
                </div>
              </div>

              {selectedPlan && (
                <div className="bg-gradient-to-r from-pink-50 to-purple-50 rounded-xl p-6">
                  <h3 className="font-bold text-gray-800 mb-4">–ü—Ä–æ–º–æ–∫–æ–¥ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):</h3>
                  <div className="flex gap-4">
                    <input
                      type="text"
                      value={promoCode}
                      onChange={(e) => setPromoCode(e.target.value)}
                      className="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                      placeholder="–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
                    />
                    <button
                      onClick={onApplyPromo}
                      className="bg-gray-600 text-white px-6 py-3 rounded-xl font-bold hover:bg-gray-700 transition-all"
                    >
                      –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏
                    </button>
                  </div>
                  {promoError && (
                    <p className="text-red-600 text-sm mt-2">{promoError}</p>
                  )}
                  {promoDiscount > 0 && (
                    <p className="text-green-600 text-sm mt-2">–ó–Ω–∏–∂–∫–∞ {promoDiscount}% –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞!</p>
                  )}
                </div>
              )}

              {selectedPlan && (
                <div className="bg-white border-2 border-gray-200 rounded-xl p-6">
                  <h3 className="font-bold text-gray-800 mb-4">–ü—ñ–¥—Å—É–º–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>–¢–∞—Ä–∏—Ñ {selectedPlan === 'basic' ? '–ë–∞–∑–æ–≤–∏–π' : '–ü—Ä–µ–º—ñ—É–º'}:</span>
                      <span>{selectedPlan === 'basic' ? `${settings?.basicPlanPrice || 100}‚Ç¥` : `${settings?.premiumPlanPrice || 200}‚Ç¥`}</span>
                    </div>
                    {promoDiscount > 0 && (
                      <div className="flex justify-between text-green-600">
                        <span>–ó–Ω–∏–∂–∫–∞ ({promoDiscount}%):</span>
                        <span>-{Math.round((selectedPlan === 'basic' ? (settings?.basicPlanPrice || 100) : (settings?.premiumPlanPrice || 200)) * promoDiscount / 100)}‚Ç¥</span>
                      </div>
                    )}
                    <div className="border-t pt-2 flex justify-between font-bold text-lg">
                      <span>–†–∞–∑–æ–º:</span>
                      <span>{Math.round((selectedPlan === 'basic' ? (settings?.basicPlanPrice || 100) : (settings?.premiumPlanPrice || 200)) * (1 - promoDiscount/100))}‚Ç¥</span>
                    </div>
                  </div>
                </div>
              )}

              <div className="flex justify-between pt-6">
                <button
                  onClick={onPrevStep}
                  className="bg-gray-300 text-gray-700 px-8 py-3 rounded-xl font-bold hover:bg-gray-400 transition-all"
                >
                  ‚Üê –ù–∞–∑–∞–¥
                </button>
                <button
                  onClick={onPayment}
                  disabled={!selectedPlan}
                  className="bg-gradient-to-r from-pink-500 to-purple-600 text-white px-8 py-3 rounded-xl font-bold hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
      
    </div>
  )
} 