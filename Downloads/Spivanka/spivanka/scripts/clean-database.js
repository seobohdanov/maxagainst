require('dotenv').config({ path: '.env.local' })
const { MongoClient } = require('mongodb')

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://seobohdanov:Qjr5xqHKNGcQJXqe@cluster0.uuhft.mongodb.net/spivanka?retryWrites=true&w=majority&appName=Cluster0'

async function cleanDatabase() {
  const client = new MongoClient(MONGODB_URI)
  
  try {
    await client.connect()
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB')
    
    const db = client.db()
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:')
    
    const collections = ['greetings', 'generation_status', 'payments', 'settings', 'suno_callbacks']
    const stats = {}
    
    for (const collectionName of collections) {
      try {
        const count = await db.collection(collectionName).countDocuments()
        stats[collectionName] = count
        console.log(`   ${collectionName}: ${count} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤`)
      } catch (error) {
        stats[collectionName] = 0
        console.log(`   ${collectionName}: 0 –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (–∫–æ–ª–µ–∫—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î)`)
      }
    }
    
    console.log('\nü§î –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏?')
    console.log('1. –¢—ñ–ª—å–∫–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ (–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ç—É—Å–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó)')
    console.log('2. –í—Å–µ –∫—Ä—ñ–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–∑–∞–ª–∏—à–∏—Ç–∏ settings)')
    console.log('3. –ü–æ–≤–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ (–í–°–ï, –≤–∫–ª—é—á–∞—é—á–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è)')
    console.log('4. –¢—ñ–ª—å–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó (—Å—Ç–∞—Ç—É—Å != SUCCESS)')
    console.log('5. –¢—ñ–ª—å–∫–∏ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω—ñ–≤)')
    console.log('6. –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ñ –≤–∏–π—Ç–∏')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const choice = process.argv[2] || '6'
    
    switch (choice) {
      case '1':
        await cleanTestData(db, stats)
        break
      case '2':
        await cleanAllExceptSettings(db, stats)
        break
      case '3':
        await fullClean(db, stats)
        break
      case '4':
        await cleanIncompleteGenerations(db, stats)
        break
      case '5':
        await cleanOldData(db, stats)
        break
      case '6':
        await showDetailedStats(db)
        break
      default:
        console.log('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: node scripts/clean-database.js [1-6]')
        process.exit(1)
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error)
  } finally {
    await client.close()
    console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ MongoDB –∑–∞–∫—Ä–∏—Ç–æ')
  }
}

async function cleanTestData(db, stats) {
  console.log('\nüßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...')
  
  try {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ç—É—Å–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
    const [greetingsResult, statusResult, callbacksResult] = await Promise.all([
      db.collection('greetings').deleteMany({}),
      db.collection('generation_status').deleteMany({}),
      db.collection('suno_callbacks').deleteMany({})
    ])
    
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${greetingsResult.deletedCount} –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å`)
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${statusResult.deletedCount} —Å—Ç–∞—Ç—É—Å—ñ–≤ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó`)
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${callbacksResult.deletedCount} callback\'—ñ–≤`)
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ! –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–ª–∞—Ç–µ–∂—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.')
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:', error)
  }
}

async function cleanAllExceptSettings(db, stats) {
  console.log('\nüßπ –û—á–∏—â–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ –∫—Ä—ñ–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...')
  
  try {
    const [greetingsResult, statusResult, paymentsResult, callbacksResult] = await Promise.all([
      db.collection('greetings').deleteMany({}),
      db.collection('generation_status').deleteMany({}),
      db.collection('payments').deleteMany({}),
      db.collection('suno_callbacks').deleteMany({})
    ])
    
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${greetingsResult.deletedCount} –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å`)
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${statusResult.deletedCount} —Å—Ç–∞—Ç—É—Å—ñ–≤ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó`)
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${paymentsResult.deletedCount} –ø–ª–∞—Ç–µ–∂—ñ–≤`)
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${callbacksResult.deletedCount} callback\'—ñ–≤`)
    console.log('‚úÖ –í—Å–µ –æ—á–∏—â–µ–Ω–æ –∫—Ä—ñ–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å!')
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è:', error)
  }
}

async function fullClean(db, stats) {
  console.log('\nüßπ –ü–û–í–ù–ê –û–ß–ò–°–¢–ö–ê –ë–ê–ó–ò –î–ê–ù–ò–•...')
  console.log('‚ö†Ô∏è  –¶–ï –í–ò–î–ê–õ–ò–¢–¨ –í–°–ï, –í–ö–õ–Æ–ß–ê–Æ–ß–ò –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ê–î–ú–Ü–ù–ê!')
  
  try {
    const collections = ['greetings', 'generation_status', 'payments', 'settings', 'suno_callbacks']
    const results = {}
    
    for (const collectionName of collections) {
      try {
        const result = await db.collection(collectionName).deleteMany({})
        results[collectionName] = result.deletedCount
        console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ ${collectionName}`)
      } catch (error) {
        console.log(`‚ö†Ô∏è  –ö–æ–ª–µ–∫—Ü—ñ—è ${collectionName} –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –ø–æ–º–∏–ª–∫–∞: ${error.message}`)
      }
    }
    
    console.log('‚úÖ –ü–æ–≤–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–Ω–æ—ó –æ—á–∏—Å—Ç–∫–∏:', error)
  }
}

async function cleanIncompleteGenerations(db, stats) {
  console.log('\nüßπ –û—á–∏—â–µ–Ω–Ω—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π...')
  
  try {
    const incompleteStatuses = ['PENDING', 'TEXT_SUCCESS', 'FIRST_SUCCESS', 'ERROR', 'FAILED']
    
    const [greetingsResult, statusResult] = await Promise.all([
      db.collection('greetings').deleteMany({
        status: { $in: incompleteStatuses }
      }),
      db.collection('generation_status').deleteMany({
        status: { $in: incompleteStatuses }
      })
    ])
    
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${greetingsResult.deletedCount} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å`)
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${statusResult.deletedCount} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤`)
    console.log('‚úÖ –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ—á–∏—â–µ–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π:', error)
  }
}

async function cleanOldData(db, stats) {
  console.log('\nüßπ –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω—ñ–≤)...')
  
  try {
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
    
    const [greetingsResult, statusResult, callbacksResult] = await Promise.all([
      db.collection('greetings').deleteMany({
        createdAt: { $lt: sevenDaysAgo }
      }),
      db.collection('generation_status').deleteMany({
        createdAt: { $lt: sevenDaysAgo }
      }),
      db.collection('suno_callbacks').deleteMany({
        receivedAt: { $lt: sevenDaysAgo }
      })
    ])
    
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${greetingsResult.deletedCount} —Å—Ç–∞—Ä–∏—Ö –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å`)
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${statusResult.deletedCount} —Å—Ç–∞—Ä–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤`)
    console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${callbacksResult.deletedCount} —Å—Ç–∞—Ä–∏—Ö callback\'—ñ–≤`)
    console.log('‚úÖ –°—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö:', error)
  }
}

async function showDetailedStats(db) {
  console.log('\nüìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:')
  
  try {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å
    const greetingsStats = await db.collection('greetings').aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]).toArray()
    
    console.log('\nüéµ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö:')
    greetingsStats.forEach(stat => {
      console.log(`   ${stat._id || 'undefined'}: ${stat.count}`)
    })
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö
    const userCount = await db.collection('greetings').distinct('userId')
    console.log(`\nüë• –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${userCount.length}`)
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂—ñ–≤
    const paymentsStats = await db.collection('payments').aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 },
          totalAmount: { $sum: '$amount' }
        }
      }
    ]).toArray()
    
    console.log('\nüí∞ –ü–ª–∞—Ç–µ–∂—ñ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö:')
    paymentsStats.forEach(stat => {
      console.log(`   ${stat._id || 'undefined'}: ${stat.count} –ø–ª–∞—Ç–µ–∂—ñ–≤, —Å—É–º–∞: ${stat.totalAmount || 0} ‚Ç¥`)
    })
    
    // –ü—É–±–ª—ñ—á–Ω—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    const publicGreetings = await db.collection('greetings').countDocuments({
      $or: [
        { allowSharing: true },
        { makePublic: true }
      ]
    })
    console.log(`\nüåê –ü—É–±–ª—ñ—á–Ω–∏—Ö –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å: ${publicGreetings}`)
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    const settings = await db.collection('settings').findOne({ type: 'app' })
    console.log('\n‚öôÔ∏è  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–∞:')
    if (settings) {
      console.log(`   –ù–∞–∑–≤–∞: ${settings.data?.appName || 'Spivanka'}`)
      console.log(`   –ë–∞–∑–æ–≤–∏–π –ø–ª–∞–Ω: ${settings.data?.basicPlanPrice || 100} ‚Ç¥`)
      console.log(`   –ü—Ä–µ–º—ñ—É–º –ø–ª–∞–Ω: ${settings.data?.premiumPlanPrice || 200} ‚Ç¥`)
      console.log(`   –†–µ–∂–∏–º –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è: ${settings.data?.maintenanceMode ? '–¢–ê–ö' : '–ù–Ü'}`)
    } else {
      console.log('   –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ñ)')
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
cleanDatabase().catch(console.error)
