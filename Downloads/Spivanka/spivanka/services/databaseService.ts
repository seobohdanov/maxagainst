import type { Greeting, GenerationStatus } from '@/types'
import clientPromise from '@/lib/mongodb'
import { ObjectId } from 'mongodb'
import { handleApiError, getPlanPrices, calculatePlanPrice } from '@/lib/utils'
import { setSecureValue, getSecureValue } from '@/lib/encryption'

// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
// –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MongoDB Atlas –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/spivanka'

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å localStorage –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ MongoDB

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø Greeting –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MongoDB
type GreetingWithMongoId = Greeting & { _id?: ObjectId }

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
export async function saveGreeting(greetingData: any): Promise<Greeting> {
  try {
    const client = await clientPromise
    const db = client.db()
    
    // –®–∏—Ñ—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const greeting = {
      ...greetingData,
      // –®–∏—Ñ—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      recipientName: setSecureValue(greetingData.recipientName || ''),
      personalDetails: setSecureValue(greetingData.personalDetails || ''),
      relationship: setSecureValue(greetingData.relationship || ''),
      text: setSecureValue(greetingData.text || ''),
      createdAt: greetingData.createdAt || new Date(),
      updatedAt: new Date()
    }

    let result
    if (greetingData.taskId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º taskId
      const existing = await db.collection('greetings').findOne({ 
        $or: [
          { _id: greetingData.taskId },
          { taskId: greetingData.taskId }
        ]
      })
      
      if (existing) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        await db.collection('greetings').updateOne(
          { $or: [{ _id: greetingData.taskId }, { taskId: greetingData.taskId }] },
          { $set: { ...greeting, updatedAt: new Date() } }
        )
        console.log('‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ (upsert):', greetingData.taskId)
        result = { ...existing, ...greeting }
      } else {
        // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å taskId –∫–∞–∫ _id
        result = await db.collection('greetings').insertOne({ 
          _id: greetingData.taskId, 
          ...greeting 
        })
        console.log('‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ (insert):', greetingData.taskId)
        result = { ...greeting, id: greetingData.taskId }
      }
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º MongoDB ObjectId
      result = await db.collection('greetings').insertOne(greeting)
      console.log('‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ MongoDB ObjectId:', result.insertedId.toString())
      result = { ...greeting, id: result.insertedId.toString() }
    }

    return result as Greeting
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è')
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserGreetings(userId: string): Promise<Greeting[]> {
  try {
    console.log('üîç getUserGreetings: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userId)
    const client = await clientPromise
    const db = client.db()
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –æ–±–µ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
    const [greetingsFromGreetings, statusesFromGeneration] = await Promise.all([
      db.collection('greetings').find({ userId }).toArray(),
      db.collection('generation_status').find({ userId }).toArray()
    ])

    console.log('üìä getUserGreetings: –ó greetings –∫–æ–ª–µ–∫—Ü—ñ—ó:', greetingsFromGreetings.length)
    console.log('üìä getUserGreetings: –ó generation_status –∫–æ–ª–µ–∫—Ü—ñ—ó:', statusesFromGeneration.length)

    // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ taskId
    const greetingsMap = new Map()
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ greetings –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    greetingsFromGreetings.forEach(({ _id, ...greeting }) => {
      const id = _id?.toString() || greeting.id || ''
      const taskId = greeting.taskId || id
      
      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const decryptedGreeting = {
        ...greeting,
        recipientName: getSecureValue(greeting.recipientName || ''),
        personalDetails: getSecureValue(greeting.personalDetails || ''),
        relationship: getSecureValue(greeting.relationship || ''),
        text: getSecureValue(greeting.text || ''),
        id,
        taskId,
        source: 'greetings'
      }
      
      console.log('üìã getUserGreetings: –î–æ–¥–∞—é –∑ greetings:', {
        id,
        taskId,
        recipientName: decryptedGreeting.recipientName
      })
      
      greetingsMap.set(taskId, decryptedGreeting)
    })
    
    // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ generation_status –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    // –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ greetings –∏ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å SUCCESS
    statusesFromGeneration.forEach((status) => {
      const taskId = status.taskId
      if (taskId && status.status === 'SUCCESS') {
        const existing = greetingsMap.get(taskId)
        if (existing) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ generation_status
          console.log('üîÑ getUserGreetings: –û–Ω–æ–≤–ª—é—é —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å –∑ generation_status:', taskId)
          greetingsMap.set(taskId, {
            ...existing,
            status: status.status,
            musicUrl: status.musicUrl || existing.musicUrl,
            coverUrl: status.coverUrl || existing.coverUrl,
            secondMusicUrl: status.secondMusicUrl || existing.secondMusicUrl,
            text: status.text || existing.text,
            updatedAt: status.updatedAt || existing.updatedAt
          })
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
          console.log('üìã getUserGreetings: –°—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –∑ generation_status:', taskId)
          
          // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º formData –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç
          const formData = status.formData || status.data?.formData || {}
          const plan = status.data?.selectedPlan || formData.plan || 'basic'
          
          const greetingData = {
            taskId: taskId,
            recipientName: formData.recipientName || '',
            occasion: formData.occasion || '',
            relationship: formData.relationship || '',
            personalDetails: formData.personalDetails || '',
            musicStyle: formData.musicStyle || '',
            mood: formData.mood || '',
            greetingLanguage: formData.greetingLanguage || 'uk',
            text: status.text || formData.text || '',
            plan: plan,
            totalPrice: plan === 'premium' ? 200 : 100, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–µ–Ω—ã
            paymentMethod: 'liqpay',
            musicUrl: status.musicUrl || formData.musicUrl || '',
            secondMusicUrl: status.secondMusicUrl || formData.secondMusicUrl || '',
            coverUrl: status.coverUrl || formData.coverUrl || '',
            allowSharing: false,
            userId: status.userId || formData.userId || userId,
            status: status.status || 'SUCCESS',
            createdAt: status.createdAt || new Date(),
            updatedAt: status.updatedAt || new Date()
          }
          
          // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ generation_status
          const decryptedGreetingData = {
            ...greetingData,
            recipientName: getSecureValue(greetingData.recipientName || ''),
            personalDetails: getSecureValue(greetingData.personalDetails || ''),
            relationship: getSecureValue(greetingData.relationship || ''),
            text: getSecureValue(greetingData.text || '')
          }
          greetingsMap.set(taskId, {
            ...decryptedGreetingData,
            id: taskId,
            taskId,
            source: 'generation_status'
          })
        }
      } else if (taskId) {
        console.log('‚ö†Ô∏è getUserGreetings: –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø–∏—Å –∑ generation_status (—Å—Ç–∞—Ç—É—Å –Ω–µ SUCCESS):', {
          taskId,
          status: status.status
        })
      }
    })

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const allGreetings: Greeting[] = Array.from(greetingsMap.values())
      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())

    console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${allGreetings.length} –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:`, userId)
    console.log('üîç –î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Å—ñ–≤:', allGreetings.map(g => ({
      id: g.id,
      taskId: g.taskId,
      status: g.status,
      musicStyle: g.musicStyle,
      mood: g.mood,
      greetingLanguage: g.greetingLanguage,
      source: (g as any).source
    })))
    
    return allGreetings
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è')
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
 */
export async function getPublicGreetings(limit: number = 10): Promise<Greeting[]> {
  try {
    const client = await clientPromise
    const db = client.db()
    
    const greetings = await db
      .collection('greetings')
      .find({ 
        $or: [
          { allowSharing: true },
          { makePublic: true }
        ],
        status: 'SUCCESS',
        musicUrl: { $exists: true, $ne: '' }
      })
      .sort({ createdAt: -1 })
      .limit(limit)
      .toArray() as GreetingWithMongoId[]

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const publicGreetings: Greeting[] = greetings.map(({ _id, userId, ...greeting }) => ({
      ...greeting,
      id: _id?.toString() || greeting.id || '',
      userId: 'anonymous' // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π userId
    }))

    console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${publicGreetings.length} –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å`)
    
    return publicGreetings
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è')
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export async function updateGreeting(greetingId: string, updates: Partial<Greeting>): Promise<Greeting> {
  try {
    const client = await clientPromise
    const db = client.db()
    
    let result: any = null
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ taskId (–ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ _id)
    result = await db
      .collection('greetings')
      .findOneAndUpdate(
        { _id: greetingId } as any,
        { 
          $set: { 
            ...updates, 
            updatedAt: new Date() 
          } 
        },
        { returnDocument: 'after' }
      )
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ MongoDB ObjectId, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ ObjectId
    if (!result && ObjectId.isValid(greetingId)) {
      result = await db
        .collection('greetings')
        .findOneAndUpdate(
          { _id: new ObjectId(greetingId) },
          { 
            $set: { 
              ...updates, 
              updatedAt: new Date() 
            } 
          },
          { returnDocument: 'after' }
        )
    }

    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–æ –ø–æ–ª—é taskId
    if (!result) {
      result = await db
        .collection('greetings')
        .findOneAndUpdate(
          { taskId: greetingId },
          { 
            $set: { 
              ...updates, 
              updatedAt: new Date() 
            } 
          },
          { returnDocument: 'after' }
        )
    }

    if (!result) {
      throw new Error('–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
    }

    const updatedGreeting: Greeting = {
      ...result,
      id: result._id?.toString() || ''
    }
    delete (updatedGreeting as any)._id

    console.log('‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ:', updatedGreeting.id)
    
    return updatedGreeting
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è')
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export async function deleteGreeting(greetingId: string): Promise<void> {
  try {
    console.log('üóëÔ∏è –ü–æ—á–∞—Ç–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:', greetingId)
    const client = await clientPromise
    const db = client.db()
    
    let deletedCount = 0
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ greetings
    const existingGreeting = await db.collection('greetings').findOne({ 
      $or: [
        { _id: greetingId } as any,
        { taskId: greetingId },
        ObjectId.isValid(greetingId) ? { _id: new ObjectId(greetingId) } : null
      ].filter(Boolean)
    })
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ generation_status
    const existingStatus = await db.collection('generation_status').findOne({ taskId: greetingId })
    
    if (existingGreeting) {
      console.log('üìã –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤ greetings –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', {
        _id: existingGreeting._id,
        taskId: existingGreeting.taskId,
        recipientName: existingGreeting.recipientName
      })
    }
    
    if (existingStatus) {
      console.log('üìã –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤ generation_status –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', {
        taskId: existingStatus.taskId,
        status: existingStatus.status,
        userId: existingStatus.userId
      })
    }
    
    if (!existingGreeting && !existingStatus) {
      console.log('‚ùå –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω—ñ–π –∫–æ–ª–µ–∫—Ü—ñ—ó:', greetingId)
      throw new Error('–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ greetings –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    const greetingsResults = await Promise.all([
      db.collection('greetings').deleteOne({ _id: greetingId } as any),
      ObjectId.isValid(greetingId) ? db.collection('greetings').deleteOne({ _id: new ObjectId(greetingId) }) : Promise.resolve({ deletedCount: 0 }),
      db.collection('greetings').deleteOne({ taskId: greetingId })
    ])
    
    const greetingsDeleted = greetingsResults.reduce((sum, result) => sum + result.deletedCount, 0)
    console.log('üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ greetings:', greetingsDeleted)
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ generation_status –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    const statusResults = await Promise.all([
      db.collection('generation_status').deleteOne({ taskId: greetingId }),
      ObjectId.isValid(greetingId) ? db.collection('generation_status').deleteOne({ _id: new ObjectId(greetingId) }) : Promise.resolve({ deletedCount: 0 }),
      db.collection('generation_status').deleteOne({ _id: greetingId } as any)
    ])
    
    const statusDeleted = statusResults.reduce((sum, result) => sum + result.deletedCount, 0)
    console.log('üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ generation_status:', statusDeleted)
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º –∂–µ taskId (–µ—Å–ª–∏ —ç—Ç–æ ObjectId –∏–∑ greetings)
    if (existingGreeting && existingGreeting.taskId && existingGreeting.taskId !== greetingId) {
      console.log('üßπ –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ—á–∏—Å—Ç–∫–∞: –≤–∏–¥–∞–ª—è—é –∑–∞–ø–∏—Å–∏ –∑ taskId:', existingGreeting.taskId)
      const additionalCleanup = await db.collection('generation_status').deleteMany({ taskId: existingGreeting.taskId })
      console.log('üßπ –î–æ–¥–∞—Ç–∫–æ–≤–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ generation_status:', additionalCleanup.deletedCount)
    }
    
    deletedCount = greetingsDeleted + statusDeleted

    if (deletedCount === 0) {
      console.log('‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è ID:', greetingId)
      throw new Error('–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
    }

    console.log('‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±–æ—Ö –∫–æ–ª–µ–∫—Ü—ñ–π:', greetingId, '–≤–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤:', deletedCount)
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è')
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ ID
 */
export async function getGreetingById(greetingId: string): Promise<Greeting | null> {
  try {
    console.log('üîç getGreetingById: –ü–æ—à—É–∫ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ ID:', greetingId)
    const client = await clientPromise
    const db = client.db()
    
    let greeting: any = null
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ greetings
    greeting = await db.collection('greetings').findOne({ _id: greetingId } as any)
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ MongoDB ObjectId, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ObjectId
    if (!greeting && ObjectId.isValid(greetingId)) {
      greeting = await db.collection('greetings').findOne({ _id: new ObjectId(greetingId) })
    }

    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–æ –ø–æ–ª—é taskId
    if (!greeting) {
      greeting = await db.collection('greetings').findOne({ taskId: greetingId })
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ greetings, –∏—â–µ–º –≤ generation_status
    if (!greeting) {
      console.log('üîç getGreetingById: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ greetings, —à—É–∫–∞—é –≤ generation_status...')
      
      const statusRecord = await db.collection('generation_status').findOne({ taskId: greetingId })
      
      if (statusRecord) {
        console.log('üìã getGreetingById: –ó–Ω–∞–π–¥–µ–Ω–æ –≤ generation_status:', {
          taskId: statusRecord.taskId,
          status: statusRecord.status,
          userId: statusRecord.userId
        })
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø–∏—Å—å –∏–∑ generation_status –≤ —Ñ–æ—Ä–º–∞—Ç Greeting
        const formData = statusRecord.formData || statusRecord.data?.formData || {}
        const plan = statusRecord.data?.selectedPlan || formData.plan || 'basic'
        
        greeting = {
          _id: statusRecord.taskId,
          taskId: statusRecord.taskId,
          recipientName: formData.recipientName || '',
          occasion: formData.occasion || '',
          relationship: formData.relationship || '',
          personalDetails: formData.personalDetails || '',
          musicStyle: formData.musicStyle || '',
          mood: formData.mood || '',
          greetingLanguage: formData.greetingLanguage || 'uk',
          text: statusRecord.text || formData.text || '',
          plan: plan,
          totalPrice: plan === 'premium' ? 200 : 100,
          paymentMethod: 'liqpay',
          musicUrl: statusRecord.musicUrl || formData.musicUrl || '',
          secondMusicUrl: statusRecord.secondMusicUrl || formData.secondMusicUrl || '',
          coverUrl: statusRecord.coverUrl || formData.coverUrl || '',
          allowSharing: false,
          userId: statusRecord.userId || formData.userId || '',
          status: statusRecord.status || 'SUCCESS',
          createdAt: statusRecord.createdAt || new Date(),
          updatedAt: statusRecord.updatedAt || new Date()
        }
      }
    }

    if (!greeting) {
      console.log('‚ùå getGreetingById: –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω—ñ–π –∫–æ–ª–µ–∫—Ü—ñ—ó')
      return null
    }

    const greetingWithStringId: Greeting = {
      ...greeting,
      id: greeting._id?.toString() || greeting.taskId || ''
    }
    delete (greetingWithStringId as any)._id

    console.log('‚úÖ getGreetingById: –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ:', {
      id: greetingWithStringId.id,
      taskId: greetingWithStringId.taskId,
      userId: greetingWithStringId.userId,
      source: greeting.taskId ? 'generation_status' : 'greetings'
    })

    return greetingWithStringId
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è')
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserStats(userId: string): Promise<{
  totalGreetings: number;
  successfulGreetings: number;
  pendingGreetings: number;
  publicGreetings: number;
}> {
  try {
    const client = await clientPromise
    const db = client.db()
    
    const [
      totalGreetings,
      successfulGreetings,
      pendingGreetings,
      publicGreetings
    ] = await Promise.all([
      db.collection('greetings').countDocuments({ userId }),
      db.collection('greetings').countDocuments({ userId, status: 'SUCCESS' }),
      db.collection('greetings').countDocuments({ 
        userId, 
        status: { $in: ['PENDING', 'TEXT_SUCCESS', 'FIRST_SUCCESS'] } 
      }),
      db.collection('greetings').countDocuments({ userId, allowSharing: true })
    ])

    return {
      totalGreetings,
      successfulGreetings,
      pendingGreetings,
      publicGreetings
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
 */
export async function cleanupOldGenerations(): Promise<number> {
  try {
    const client = await clientPromise
    const db = client.db()
    
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const statusResult = await db.collection('generation_status').deleteMany({
      updatedAt: { $lt: oneDayAgo },
      status: { $in: ['PENDING', 'TEXT_SUCCESS', 'FIRST_SUCCESS'] }
    })

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
    const greetingsResult = await db.collection('greetings').deleteMany({
      updatedAt: { $lt: oneDayAgo },
      status: { $in: ['PENDING', 'TEXT_SUCCESS', 'FIRST_SUCCESS'] },
      musicUrl: { $in: ['', null] }
    })

    const totalDeleted = statusResult.deletedCount + greetingsResult.deletedCount
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${totalDeleted} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤`)
    
    return totalDeleted
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π:', error)
    return 0
  }
}

// –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ mongoose:

/*
import mongoose from 'mongoose'

const greetingSchema = new mongoose.Schema({
  recipientName: { type: String, required: true },
  occasion: { type: String, required: true },
  relationship: { type: String, required: true },
  personalDetails: String,
  musicStyle: { type: String, required: true },
  mood: { type: String, required: true },
  greetingLanguage: { type: String, required: true },
  text: { type: String, required: true },
  plan: { type: String, enum: ['basic', 'premium'], required: true },
  totalPrice: { type: Number, required: true },
  paymentMethod: { type: String, required: true },
  musicUrl: String,
  coverUrl: String,
  userId: { type: String, required: true },
  allowSharing: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
})

const GreetingModel = mongoose.model('Greeting', greetingSchema)

export async function connectDB() {
  try {
    await mongoose.connect(MONGODB_URI)
    console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB')
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', error)
    throw error
  }
}

export async function saveGreeting(greetingData: any): Promise<Greeting> {
  try {
    const greeting = new GreetingModel(greetingData)
    const savedGreeting = await greeting.save()
    return savedGreeting.toObject()
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è')
  }
}

export async function getUserGreetings(userId: string): Promise<Greeting[]> {
  try {
    const greetings = await GreetingModel.find({ userId }).sort({ createdAt: -1 })
    return greetings.map(g => g.toObject())
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å:', error)
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è')
  }
}
*/ 