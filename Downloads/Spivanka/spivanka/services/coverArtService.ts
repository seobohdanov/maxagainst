import { FormData } from '@/types'

// –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI Image API (GPT Image 1) –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω–∞
const OPENAI_API_KEY = process.env.NEXT_PUBLIC_OPENAI_API_KEY
const REPLICATE_API_KEY = process.env.NEXT_PUBLIC_REPLICATE_API_KEY

export async function generateCoverArt(formData: FormData, text: string, plan: 'basic' | 'premium', sunoCoverUrl?: string): Promise<string> {
  console.log(`üñºÔ∏è –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ –¥–ª—è –ø–ª–∞–Ω—É: ${plan}`)
  
  if (plan === 'premium') {
    // –î–ª—è –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–ª–æ–∂–∫—É —á–µ—Ä–µ–∑ OpenAI Image API
    console.log('üñºÔ∏è –ì–µ–Ω–µ—Ä—É—é –æ–±–∫–ª–∞–¥–∏–Ω–∫—É —á–µ—Ä–µ–∑ OpenAI Image API –¥–ª—è –ø—Ä–µ–º—ñ—É–º –ø–ª–∞–Ω—É')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if (!OPENAI_API_KEY || OPENAI_API_KEY === 'your-openai-api-key') {
      console.warn('‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—É –æ–±–∫–ª–∞–¥–∏–Ω–∫—É')
      return getDefaultCoverArt(formData)
    }
    
    try {
      const coverUrl = await generateWithOpenAIImage(formData, text)
      console.log('‚úÖ –û–±–∫–ª–∞–¥–∏–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ OpenAI:', coverUrl)
      return coverUrl
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ OpenAI:', error)
      console.log('üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—É –æ–±–∫–ª–∞–¥–∏–Ω–∫—É —è–∫ fallback')
      return getDefaultCoverArt(formData)
    }
  } else {
    // –î–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–æ–∂–∫—É –æ—Ç Suno API (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
    if (sunoCoverUrl) {
      console.log('üñºÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –≤—ñ–¥ Suno API –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É:', sunoCoverUrl)
      return sunoCoverUrl
    } else {
      console.log('üñºÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—É –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É')
      return getDefaultCoverArt(formData)
    }
  }
}

function getDefaultCoverArt(formData: FormData): string {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –æ–±–ª–æ–∂–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è –º—É–∑—ã–∫–∏
  const styleCovers: { [key: string]: string } = {
    'pop': 'https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=400&h=400&fit=crop',
    'folk': 'https://images.unsplash.com/photo-1511379938547-c1f69419868d?w=400&h=400&fit=crop',
    'ballad': 'https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=400&h=400&fit=crop',
    'rock': 'https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=400&h=400&fit=crop',
    'jazz': 'https://images.unsplash.com/photo-1511379938547-c1f69419868d?w=400&h=400&fit=crop',
    'children': 'https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=400&h=400&fit=crop'
  }
  
  return styleCovers[formData.musicStyle] || styleCovers['pop']
}

async function generateWithOpenAIImage(formData: FormData, text: string): Promise<string> {
  if (!OPENAI_API_KEY) {
    console.error('‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π')
    throw new Error('OPENAI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
  }
  
  const prompt = createCoverPrompt(formData, text);
  console.log('üé® OpenAI Image prompt:', prompt.substring(0, 200) + '...');
  
  try {
    const response = await fetch('https://api.openai.com/v1/images/generations', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
          body: JSON.stringify({
      model: "gpt-image-1", // –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT Image 1 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–µ–∫
      prompt,
      n: 1,
      size: "1024x1024", // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      quality: "medium" // –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    })
    });
    
    console.log('üìä OpenAI API Response status:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå OpenAI API Error:', errorText);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (response.status === 401) {
        throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π API –∫–ª—é—á OpenAI');
      } else if (response.status === 429) {
        throw new Error('–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ OpenAI API');
      } else if (response.status === 400) {
        throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ OpenAI API');
      } else {
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ OpenAI API: ${response.status}`);
      }
    }
    
    const data = await response.json();
    console.log('‚úÖ OpenAI GPT Image 1 response received');
    
    if (data.data && data.data[0]) {
      if (data.data[0].url) {
        console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ URL –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏:', data.data[0].url);
        return data.data[0].url;
      } else if (data.data[0].b64_json) {
        console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –≤ base64 —Ñ–æ—Ä–º–∞—Ç—ñ');
        // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è url
        try {
          const uploadRes = await fetch(`${typeof window !== 'undefined' ? '' : 'http://localhost:3000'}/api/upload/cover`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ b64: `data:image/png;base64,${data.data[0].b64_json}`, ext: 'png' })
          })
          
          if (!uploadRes.ok) {
            throw new Error(`Upload failed: ${uploadRes.status}`);
          }
          
          const uploadData = await uploadRes.json()
          if (uploadData.url) {
            console.log('üñºÔ∏è –û–±–∫–ª–∞–¥–∏–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', uploadData.url);
            return uploadData.url
          }
        } catch (e) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', e)
        }
        // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º data URL
        console.log('üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é data URL —è–∫ fallback');
        return `data:image/png;base64,${data.data[0].b64_json}`;
      }
    }
    
    console.error('‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI GPT Image 1 API');
    throw new Error('–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI GPT Image 1 API');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ OpenAI Image API:', error);
    throw error;
  }
}

async function generateWithStableDiffusion(formData: FormData, text: string): Promise<string> {
  if (!REPLICATE_API_KEY) {
    throw new Error('REPLICATE_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π')
  }

  const prompt = createCoverPrompt(formData, text)
  
  try {
    const response = await fetch('https://api.replicate.com/v1/predictions', {
      method: 'POST',
      headers: {
        'Authorization': `Token ${REPLICATE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        version: "39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",
        input: {
          prompt: prompt,
          width: 1024,
          height: 1024,
          num_outputs: 1,
          guidance_scale: 7.5,
          num_inference_steps: 50,
          scheduler: "K_EULER"
        }
      })
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const data = await response.json()
    const predictionId = data.id

    // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const imageUrl = await waitForStableDiffusion(predictionId)
    return imageUrl

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ Stable Diffusion:', error)
    throw error
  }
}

async function waitForStableDiffusion(predictionId: string): Promise<string> {
  const maxAttempts = 30 // –ú–∞–∫—Å–∏–º—É–º 2.5 –º–∏–Ω—É—Ç—ã (30 * 5 —Å–µ–∫—É–Ω–¥)
  let attempts = 0

  while (attempts < maxAttempts) {
    try {
      const response = await fetch(`https://api.replicate.com/v1/predictions/${predictionId}`, {
        headers: {
          'Authorization': `Token ${REPLICATE_API_KEY}`,
        },
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()
      
      if (data.status === 'succeeded' && data.output && data.output.length > 0) {
        return data.output[0]
      } else if (data.status === 'failed') {
        throw new Error('–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ –Ω–µ –≤–¥–∞–ª–∞—Å—è')
      }

      // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 5000))
      attempts++

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏:', error)
      attempts++
      await new Promise(resolve => setTimeout(resolve, 5000))
    }
  }

  throw new Error('–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ')
}

function createCoverPrompt(formData: FormData, text: string): string {
  const styleMap: { [key: string]: string } = {
    'pop': 'modern, vibrant, colorful, contemporary',
    'folk': 'traditional, warm, rustic, handmade',
    'ballad': 'romantic, soft, elegant, dreamy',
    'rock': 'dynamic, bold, energetic, powerful',
    'jazz': 'sophisticated, classy, vintage, elegant',
    'children': 'playful, bright, cartoon-like, cheerful'
  }

  const moodMap: { [key: string]: string } = {
    'joyful': 'joyful, happy, celebratory, uplifting',
    'tender': 'tender, gentle, warm, heartfelt',
    'solemn': 'solemn, dignified, respectful, meaningful',
    'energetic': 'energetic, dynamic, vibrant, exciting'
  }

  const occasionMap: { [key: string]: string } = {
    '–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è': 'birthday celebration with cake, balloons, gifts, party decorations',
    '–í–µ—Å—ñ–ª–ª—è': 'wedding celebration with rings, flowers, champagne, romantic elements',
    '–Æ–≤—ñ–ª–µ–π': 'anniversary celebration with hearts, roses, romantic elements, golden accents',
    '–ù–æ–≤–∏–π —Ä—ñ–∫': 'New Year celebration with fireworks, champagne, festive elements, sparkles',
    '–†—ñ—á–Ω–∏—Ü—è': 'anniversary with romantic symbols, hearts, flowers, love elements',
    '–í–∏–ø—É—Å–∫–Ω–∏–π': 'graduation celebration with diploma, cap, academic symbols, achievement',
    '–•—Ä–µ—Å—Ç–∏–Ω–∏': 'christening celebration with angel symbols, white flowers, peaceful elements, innocence'
  }

  const languageMap: { [key: string]: string } = {
    'uk': 'Ukrainian',
    'en': 'English',
    'ru': 'Russian'
  }

  const style = styleMap[formData.musicStyle] || 'modern'
  const mood = moodMap[formData.mood] || 'warm'
  const occasion = occasionMap[formData.occasion] || 'celebration'
  const language = languageMap[formData.greetingLanguage] || 'Ukrainian'

  // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–ª–æ–∂–∫–∏
  const shortText = createShortText(formData, language)

  return `
Create a stunning, professional album cover for a personal greeting song with the following specifications:

THEME: ${occasion} celebration for ${formData.recipientName}
MUSIC STYLE: ${formData.musicStyle} genre with ${mood} atmosphere
LANGUAGE: ${language}

DESIGN REQUIREMENTS:
- Square format (1024x1024 pixels), ultra-high quality
- Include the text "${shortText}" prominently displayed in ${language} language
- Musical elements: floating musical notes, instruments, or musical symbols
- Celebration elements appropriate for ${formData.occasion}
- Color palette: warm, inviting colors that match the ${mood} mood
- Typography: elegant, readable font that complements the design
- Style: ${style} aesthetic with professional finish
- No human figures or faces
- Clean, modern composition suitable for a greeting card or album cover
- The text should be clearly readable and artistically integrated
- Subtle gradients and lighting effects for depth
- High contrast for readability while maintaining artistic appeal

TECHNICAL SPECIFICATIONS:
- Resolution: 1024x1024 pixels
- Quality: Ultra-high definition
- Style: Natural, photorealistic
- Composition: Balanced and visually appealing
- Text integration: Seamlessly blended with the design

The cover should capture the personal, heartfelt nature of the greeting while representing the musical style and celebration theme in a sophisticated, professional manner.
  `.trim()
}

function createShortText(formData: FormData, language: string): string {
  const shortTexts: { [key: string]: { [key: string]: string } } = {
    'uk': {
      '–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è': '–ó –î–Ω–µ–º –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!',
      '–í–µ—Å—ñ–ª–ª—è': '–ó –î–Ω–µ–º –í–µ—Å—ñ–ª–ª—è!',
      '–Æ–≤—ñ–ª–µ–π': '–ó –Æ–≤—ñ–ª–µ—î–º!',
      '–ù–æ–≤–∏–π —Ä—ñ–∫': '–ó –ù–æ–≤–∏–º –†–æ–∫–æ–º!',
      '–†—ñ—á–Ω–∏—Ü—è': '–ó –†—ñ—á–Ω–∏—Ü–µ—é!',
      '–í–∏–ø—É—Å–∫–Ω–∏–π': '–ó –í–∏–ø—É—Å–∫–Ω–∏–º!',
      '–•—Ä–µ—Å—Ç–∏–Ω–∏': '–ó –•—Ä–µ—Å—Ç–∏–Ω–∞–º–∏!'
    },
    'en': {
      '–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è': 'Happy Birthday!',
      '–í–µ—Å—ñ–ª–ª—è': 'Happy Wedding!',
      '–Æ–≤—ñ–ª–µ–π': 'Happy Anniversary!',
      '–ù–æ–≤–∏–π —Ä—ñ–∫': 'Happy New Year!',
      '–†—ñ—á–Ω–∏—Ü—è': 'Happy Anniversary!',
      '–í–∏–ø—É—Å–∫–Ω–∏–π': 'Happy Graduation!',
      '–•—Ä–µ—Å—Ç–∏–Ω–∏': 'Happy Christening!'
    },
    'ru': {
      '–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è': '–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è!',
      '–í–µ—Å—ñ–ª–ª—è': '–° –î–Ω–µ–º –°–≤–∞–¥—å–±—ã!',
      '–Æ–≤—ñ–ª–µ–π': '–° –Æ–±–∏–ª–µ–µ–º!',
      '–ù–æ–≤–∏–π —Ä—ñ–∫': '–° –ù–æ–≤—ã–º –ì–æ–¥–æ–º!',
      '–†—ñ—á–Ω–∏—Ü—è': '–° –ì–æ–¥–æ–≤—â–∏–Ω–æ–π!',
      '–í–∏–ø—É—Å–∫–Ω–∏–π': '–° –í—ã–ø—É—Å–∫–Ω—ã–º!',
      '–•—Ä–µ—Å—Ç–∏–Ω–∏': '–° –ö—Ä–µ—Å—Ç–∏–Ω–∞–º–∏!'
    }
  }

  const langTexts = shortTexts[language] || shortTexts['uk']
  return langTexts[formData.occasion] || langTexts['–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è']
} 