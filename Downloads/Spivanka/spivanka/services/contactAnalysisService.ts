// –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π

const GEMINI_API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY
const GEMINI_API_URL = process.env.NEXT_PUBLIC_GEMINI_API_URL

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
export interface ContactAnalysisResult {
  isRelative: boolean
  relationship?: string
  recipientName?: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —á–∞—Å—Ç–µ–π
function cleanContactName(name: string): string {
  // –£–±–∏—Ä–∞–µ–º "‚Äì –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "- –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "‚Äì birthday" –∏ –ø–æ–¥–æ–±–Ω–æ–µ
  const cleaned = name
    .replace(/\s*[‚Äì-]\s*(–¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è|–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è|birthday|–¥—Ä\.?|–¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è).*$/i, '')
    .trim()
  
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏:', { original: name, cleaned })
  return cleaned || name // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø—É—Å—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cleanJsonResponse(response: string): string {
  let cleaned = response.trim()
  
  // –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏
  if (cleaned.startsWith('```json')) {
    cleaned = cleaned.replace(/^```json\s*/, '').replace(/\s*```$/, '')
  } else if (cleaned.startsWith('```')) {
    cleaned = cleaned.replace(/^```\s*/, '').replace(/\s*```$/, '')
  }
  
  return cleaned.trim()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini (–∫–æ–ø–∏—è –∏–∑ geminiService)
async function performContactAnalysisRequest(prompt: string): Promise<string> {
  try {
    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.3, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        topK: 20,
        topP: 0.8,
        maxOutputTokens: 2048, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      },
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
      ]
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∫ Gemini API...')

    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    })

    console.log(`üì° –û—Ç–≤–µ—Ç –æ—Ç Gemini API (–∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞): ${response.status} ${response.statusText}`)

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`‚ùå Gemini API –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${response.status} - ${errorText}`)
      throw new Error(`–û—à–∏–±–∫–∞ API –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${response.status} - ${errorText}`)
    }

    const data = await response.json()
    console.log('üìã –û—Ç–≤–µ—Ç –æ—Ç Gemini API (–∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞):', JSON.stringify(data, null, 2))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ candidates
    if (!data.candidates || !Array.isArray(data.candidates) || data.candidates.length === 0) {
      console.error('‚ùå –ù–µ—Ç candidates –≤ –æ—Ç–≤–µ—Ç–µ Gemini API')
      throw new Error('–ù–µ—Ç candidates –≤ –æ—Ç–≤–µ—Ç–µ Gemini API')
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    let generatedText = ''
    if (
      data.candidates &&
      Array.isArray(data.candidates) &&
      data.candidates.length > 0 &&
      data.candidates[0]
    ) {
      const candidate = data.candidates[0]
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      if (candidate.finishReason === 'SAFETY') {
        console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
        throw new Error('–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
      }
      
      if (candidate.finishReason === 'MAX_TOKENS') {
        console.log('‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤')
        throw new Error('–û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤')
      }
      
      if (
        candidate.content &&
        candidate.content.parts &&
        Array.isArray(candidate.content.parts) &&
        candidate.content.parts.length > 0 &&
        candidate.content.parts[0] &&
        typeof candidate.content.parts[0].text === 'string'
      ) {
        generatedText = candidate.content.parts[0].text.trim()
      }
    }
    
    if (generatedText) {
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç:', generatedText.substring(0, 100) + '...')
      return generatedText
    } else {
      console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', JSON.stringify(data, null, 2))
      throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞')
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π
export async function analyzeContact(contactName: string): Promise<ContactAnalysisResult> {
  if (!GEMINI_API_KEY || !GEMINI_API_URL) {
    console.error('‚ùå Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤')
    return { isRelative: false, recipientName: contactName }
  }

  // –û—á–∏—â–∞–µ–º –∏–º—è –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
  const cleanedName = cleanContactName(contactName)

  const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–≤—è–∑—å—é:

–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: "${cleanedName}"

–†–û–î–°–¢–í–ï–ù–ù–´–ï –°–í–Ø–ó–ò (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–π isRelative: true):
- –¢–∞—Ç–æ: –ø–∞–ø–∞, —Ç–∞—Ç–æ, —Ç–∞—Ç–∞, –±–∞—Ç—å–∫–æ, –æ—Ç–µ—Ü, –ø–∞–ø–æ—á–∫–∞, –ø–∞–ø—É–ª—è
- –ú–∞–º–∞: –º–∞–º–∞, –º–∞—Ç–∏, –º–∞–º–æ—á–∫–∞, –º–∞–º—É–ª—è, –º–∞—Ç—å, –º–∞–º–∫–∞
- –ë—Ä–∞—Ç: –±—Ä–∞—Ç, –±—Ä–∞—Ç–∏–∫, –±—Ä–∞—Ç–∏—à–∫–∞, –±—Ä–æ
- –°–µ—Å—Ç—Ä–∞: —Å–µ—Å—Ç—Ä–∞, —Å–µ—Å—Ç—Ä–∏—á–∫–∞, —Å–µ—Å—Ç—Ä—ë–Ω–∫–∞
- –°–∏–Ω: —Å–∏–Ω, —Å—ã–Ω, —Å—ã–Ω–æ–∫, —Å—ã–Ω—É–ª—è, —Å—ã–Ω–∏—à–∫–∞
- –î–æ—á–∫–∞: –¥–æ—á–∫–∞, –¥–æ—á—å, –¥–æ—á–µ–Ω—å–∫–∞, –¥–æ—á—É—Ä–∫–∞, –¥–æ–Ω—å–∫–∞
- –î—Ä—É–∂–∏–Ω–∞: –¥—Ä—É–∂–∏–Ω–∞, –∂–µ–Ω–∞, –∂—ë–Ω—É—à–∫–∞, —Å—É–ø—Ä—É–≥–∞
- –ß–æ–ª–æ–≤—ñ–∫: —á–æ–ª–æ–≤—ñ–∫, –º—É–∂, –º—É–∂–∏–∫, —Å—É–ø—Ä—É–≥
- –î—Ä—É–≥: –¥—Ä—É–≥, –¥—Ä—É–∂–æ–∫, —Ç–æ–≤–∞—Ä–∏—â, –ø—Ä–∏—è—Ç–µ–ª—å
- –ü–æ–¥—Ä—É–≥–∞: –ø–æ–¥—Ä—É–≥–∞, –ø–æ–¥—Ä—É–∂–∫–∞, –ø—Ä–∏—è—Ç–µ–ª—å–Ω–∏—Ü–∞
- –ö–æ–ª–µ–≥–∞: –∫–æ–ª–µ–≥–∞, –∫–æ–ª–ª–µ–≥–∞, —Å–æ—Å–ª—É–∂–∏–≤–µ—Ü
- –Ü–Ω—à–µ: –¥–µ–¥—É—à–∫–∞, –¥—ñ–¥—É—Å—å, –±–∞–±—É—à–∫–∞, –±–∞–±—É—Å—è, —Ç–µ—Ç—è, –¥—è–¥—è, –ø–ª–µ–º—è–Ω–Ω–∏–∫, –ø–ª–µ–º—è–Ω–Ω–∏—Ü–∞

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "isRelative": true/false,
  "relationship": "–¢–∏–ø —Å–≤—è–∑–∏" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ isRelative = true),
  "recipientName": "–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ isRelative = false)
}

–ü—Ä–∏–º–µ—Ä—ã:
- "–ü–∞–ø–∞" ‚Üí {"isRelative": true, "relationship": "–¢–∞—Ç–æ"}
- "–ú–∞–º–æ—á–∫–∞" ‚Üí {"isRelative": true, "relationship": "–ú–∞–º–∞"}
- "–í–∞—Å—è" ‚Üí {"isRelative": false, "recipientName": "–í–∞—Å—è"}
- "–ê–Ω–Ω–∞" ‚Üí {"isRelative": false, "recipientName": "–ê–Ω–Ω–∞"}
- "My Love ‚ù§Ô∏è" ‚Üí {"isRelative": false, "recipientName": "My Love ‚ù§Ô∏è"}
- "–ú–∞–∫—Å–∏–º" ‚Üí {"isRelative": false, "recipientName": "–ú–∞–∫—Å–∏–º"}
`

  try {
    const response = await performContactAnalysisRequest(prompt)
    const cleanedResponse = cleanJsonResponse(response)
    
    try {
      const result = JSON.parse(cleanedResponse)
      console.log('ü§ñ Gemini –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç:', { contactName, cleanedName, result })
      return result
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞:', parseError)
      console.error('üìÑ –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', cleanedResponse)
      throw parseError
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ Gemini:', error)
    return { isRelative: false, recipientName: cleanedName }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π
export async function analyzeBatchContacts(contacts: string[]): Promise<Record<string, ContactAnalysisResult>> {
  if (!GEMINI_API_KEY || !GEMINI_API_URL) {
    console.error('‚ùå Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤')
    const result: Record<string, ContactAnalysisResult> = {}
    contacts.forEach(contact => {
      result[contact] = { isRelative: false, recipientName: contact }
    })
    return result
  }

  if (contacts.length === 0) {
    return {}
  }

  console.log(`ü§ñ –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ${contacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ Gemini...`)

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
  const MAX_CONTACTS_PER_BATCH = 10
  if (contacts.length > MAX_CONTACTS_PER_BATCH) {
    console.log(`‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (${contacts.length}), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ ${MAX_CONTACTS_PER_BATCH} –∑–∞ —Ä–∞–∑`)
    
    const result: Record<string, ContactAnalysisResult> = {}
    for (let i = 0; i < contacts.length; i += MAX_CONTACTS_PER_BATCH) {
      const batch = contacts.slice(i, i + MAX_CONTACTS_PER_BATCH)
      const batchResult = await analyzeBatchContacts(batch)
      Object.assign(result, batchResult)
    }
    return result
  }

  // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
  const cleanedContacts = contacts.map(contact => cleanContactName(contact))
  const contactsList = cleanedContacts.map((contact, index) => `${index + 1}. "${contact}"`).join('\n')

  const prompt = `
–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏:

${contactsList}

–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏:
- –¢–∞—Ç–æ: –ø–∞–ø–∞, —Ç–∞—Ç–æ, –±–∞—Ç—å–∫–æ, –æ—Ç–µ—Ü, –ø–∞–ø–æ—á–∫–∞
- –ú–∞–º–∞: –º–∞–º–∞, –º–∞—Ç–∏, –º–∞–º–æ—á–∫–∞, –º–∞–º—É–ª—è, –º–∞—Ç—å
- –ë—Ä–∞—Ç: –±—Ä–∞—Ç, –±—Ä–∞—Ç–∏–∫, –±—Ä–æ
- –°–µ—Å—Ç—Ä–∞: —Å–µ—Å—Ç—Ä–∞, —Å–µ—Å—Ç—Ä–∏—á–∫–∞
- –°–∏–Ω: —Å–∏–Ω, —Å—ã–Ω, —Å—ã–Ω–æ–∫
- –î–æ—á–∫–∞: –¥–æ—á–∫–∞, –¥–æ—á—å, –¥–æ–Ω—å–∫–∞
- –î—Ä—É–∂–∏–Ω–∞: –¥—Ä—É–∂–∏–Ω–∞, –∂–µ–Ω–∞, —Å—É–ø—Ä—É–≥–∞
- –ß–æ–ª–æ–≤—ñ–∫: —á–æ–ª–æ–≤—ñ–∫, –º—É–∂, —Å—É–ø—Ä—É–≥
- –î—Ä—É–≥: –¥—Ä—É–≥, —Ç–æ–≤–∞—Ä–∏—â
- –ü–æ–¥—Ä—É–≥–∞: –ø–æ–¥—Ä—É–≥–∞, –ø—Ä–∏—è—Ç–µ–ª—å–Ω–∏—Ü–∞
- –Ü–Ω—à–µ: –¥–µ–¥—É—à–∫–∞, –±–∞–±—É—à–∫–∞, —Ç–µ—Ç—è, –¥—è–¥—è

JSON –æ—Ç–≤–µ—Ç:
{
  "–ü–∞–ø–∞": {"isRelative": true, "relationship": "–¢–∞—Ç–æ"},
  "–í–∞—Å—è": {"isRelative": false, "recipientName": "–í–∞—Å—è"}
}
`

  try {
    const response = await performContactAnalysisRequest(prompt)
    const cleanedResponse = cleanJsonResponse(response)
    
    let result
    try {
      result = JSON.parse(cleanedResponse)
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞:', parseError)
      console.error('üìÑ –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', cleanedResponse)
      throw parseError
    }
    
    console.log(`ü§ñ Gemini –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª ${cleanedContacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–∞–∫–µ—Ç–Ω–æ:`, result)
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–∞–º
    const finalResult: Record<string, ContactAnalysisResult> = {}
    contacts.forEach((originalContact, index) => {
      const cleanedContact = cleanedContacts[index]
      if (result[cleanedContact]) {
        finalResult[originalContact] = result[cleanedContact]
      } else {
        finalResult[originalContact] = { isRelative: false, recipientName: cleanedContact }
      }
    })
    
    return finalResult
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ Gemini:', error)
    
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –ø–∞–∫–µ—Ç
    if (error instanceof Error && error.message.includes('–ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤') && contacts.length > 5) {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –º–µ–Ω—å—à–∏–º –ø–∞–∫–µ—Ç–æ–º (5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤)')
      const result: Record<string, ContactAnalysisResult> = {}
      for (let i = 0; i < contacts.length; i += 5) {
        const batch = contacts.slice(i, i + 5)
        try {
          const batchResult = await analyzeBatchContacts(batch)
          Object.assign(result, batchResult)
        } catch (batchError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–∫–µ—Ç–∞ ${i + 1}-${i + batch.length}:`, batchError)
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
          batch.forEach(contact => {
            const cleanedName = cleanContactName(contact)
            result[contact] = { isRelative: false, recipientName: cleanedName }
          })
        }
      }
      return result
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    const result: Record<string, ContactAnalysisResult> = {}
    contacts.forEach(contact => {
      const cleanedName = cleanContactName(contact)
      result[contact] = { isRelative: false, recipientName: cleanedName }
    })
    return result
  }
} 