import { FormData } from '@/types'
import { generateCoverArt } from '@/services/coverArtService'
import { setActiveGeneration } from '@/lib/localStorage'

const SUNO_API_KEY = process.env.NEXT_PUBLIC_SUNO_API_KEY
const SUNO_API_URL = 'https://apibox.erweima.ai'
const SUNO_CALLBACK_URL = process.env.NEXT_PUBLIC_SUNO_CALLBACK_URL || 'https://webhook.site/60dbf7c4-e76a-498a-b33d-b1868ae6ee9c'

// –ö–µ—à –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const statusCache = new Map<string, { data: any; timestamp: number }>()
const CACHE_DURATION = 30000 // 30 —Å–µ–∫—É–Ω–¥ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 10)
const RATE_LIMIT_DELAY = 5000 // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 2)
let lastRequestTime = 0

// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook.site
// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π callback URL —Å HTTPS

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
async function rateLimitDelay() {
  const now = Date.now()
  const timeSinceLastRequest = now - lastRequestTime
  
  if (timeSinceLastRequest < RATE_LIMIT_DELAY) {
    const delay = RATE_LIMIT_DELAY - timeSinceLastRequest
    console.log(`‚è≥ Rate limit: —á–µ–∫–∞—é ${delay}ms –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º`)
    await new Promise(resolve => setTimeout(resolve, delay))
  }
  
  lastRequestTime = Date.now()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
export function clearStatusCache(taskId?: string) {
  if (taskId) {
    statusCache.delete(taskId)
    console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ –∫–µ—à –¥–ª—è taskId: ${taskId}`)
  } else {
    statusCache.clear()
    console.log('üóëÔ∏è –û—á–∏—â–µ–Ω–æ –≤–µ—Å—å –∫–µ—à —Å—Ç–∞—Ç—É—Å—ñ–≤')
  }
}

export async function generateMusic(text: string, formData: any): Promise<{ url: string; type: string; taskId?: string; coverUrl?: string; openaiCoverStatus: string; openaiCoverError: string }> {
  console.log('üéµ –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—É–∑–∏–∫–∏...')
  console.log('üìù –¢–µ–∫—Å—Ç:', text)
  console.log('üìã –î–∞–Ω—ñ —Ñ–æ—Ä–º–∏:', formData)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
  if (!SUNO_API_KEY) {
    console.error('‚ùå Suno API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
    throw new Error('Suno API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
  }
  console.log('‚úÖ Suno API –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ')

  let openaiCoverUrl = ''
  let openaiCoverStatus = 'not started'
  let openaiCoverError = ''

  try {
    // –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–±–ª–æ–∂–∫–∏ OpenAI –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    let coverPromise: Promise<string> | null = null
    if (formData.plan === 'premium') {
      openaiCoverStatus = 'started'
      console.log('üñºÔ∏è [OpenAI] –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑ –º—É–∑–∏–∫–æ—é...')
      coverPromise = generateCoverArt(formData, text, 'premium')
    }

    // –°–æ–±–ª—é–¥–∞–µ–º rate limit
    await rateLimitDelay()
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è Suno
    let fullStyle = 'pop' // –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (formData.useStarStyle && formData.artistStyle) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –∞—Ä—Ç–∏—Å—Ç–∞
      const artistStyleMap: { [key: string]: string } = {
        // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –∞—Ä—Ç–∏—Å—Ç—ã (—Å–∫–æ—Ä–æ—á–µ–Ω—ñ –¥–æ 180 —Å–∏–º–≤–æ–ª—ñ–≤)
        'okean_elzy': 'rock, alternative rock, indie rock, warm voice, raspy voice, baritone voice, emotional voice, melodic voice, powerful voice, Ukrainian',
        'svyatoslav_vakarchuk': 'rock, alternative rock, patriotic rock, warm voice, raspy voice, baritone voice, emotional voice, powerful voice, Ukrainian male vocals',
        'jamala': 'ethno-pop, world music, jazz influences, soulful voice, emotional female vocals, powerful voice, expressive voice, melismatic voice, Ukrainian',
        'tina_karol': 'pop, dance pop, europop, energetic, bright voice, clear voice, soprano voice, melodic voice, catchy voice, expressive voice, female vocals',
        'verka_serduchka': 'eurodance, fun, theatrical, comedic voice, energetic voice, catchy voice, dance music, Ukrainian',
        
        // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–æ–ø-–∞—Ä—Ç–∏—Å—Ç—ã (—Å–∫–æ—Ä–æ—á–µ–Ω—ñ)
        'taylor_swift': 'pop, alternative folk, emotional, female vocals, storytelling voice, melodic voice, expressive voice, clear voice',
        'ed_sheeran': 'folk-pop, acoustic guitar loops, male vocals, warm voice, melodic voice, storytelling voice, soft voice',
        'adele': 'soul, pop ballads, powerful female vocals, emotional voice, rich voice, expressive voice, melismatic voice',
        'billie_eilish': 'alternative pop, dark pop, whisper vocals, female vocals, breathy voice, intimate voice, unique voice',
        'ariana_grande': 'pop, R&B, powerful female vocals, soprano voice, melismatic voice, expressive voice, clear voice',
        'justin_bieber': 'pop, R&B, male vocals, smooth voice, melodic voice, contemporary voice, expressive voice',
        'bruno_mars': 'pop, funk, soul, male vocals, smooth voice, energetic voice, versatile voice, charismatic voice',
        'dua_lipa': 'dance-pop, disco-pop, female vocals, clear voice, melodic voice, catchy voice, modern voice',
        
        // –†–æ–∫ –∞—Ä—Ç–∏—Å—Ç—ã (—Å–∫–æ—Ä–æ—á–µ–Ω—ñ)
        'coldplay': 'alternative rock, pop rock, atmospheric, male vocals, emotional voice, melodic voice, anthemic voice',
        'imagine_dragons': 'alternative rock, pop rock, energetic, male vocals, powerful voice, dynamic voice, modern rock',
        'queen': 'rock, operatic rock, theatrical, male vocals, powerful voice, dramatic voice, iconic voice',
        'the_beatles': 'rock, pop rock, classic rock, male vocals, harmonious voices, melodic voice, timeless voice',
        
        // R&B/Soul –∞—Ä—Ç–∏—Å—Ç—ã (—Å–∫–æ—Ä–æ—á–µ–Ω—ñ)
        'beyonce': 'R&B, pop, soul, powerful female vocals, melismatic voice, expressive voice, dynamic voice',
        'john_legend': 'R&B, soul, piano ballads, male vocals, smooth voice, emotional voice, soulful voice',
        'alicia_keys': 'R&B, soul, neo-soul, female vocals, powerful voice, soulful voice, piano-driven',
        
        // Classic/Jazz –∞—Ä—Ç–∏—Å—Ç—ã (—Å–∫–æ—Ä–æ—á–µ–Ω—ñ)
        'frank_sinatra': 'jazz, traditional pop, swing, male vocals, smooth voice, crooner voice, classic voice',
        'ella_fitzgerald': 'jazz, swing, scat singing, female vocals, versatile voice, smooth voice, improvisational',
        'nat_king_cole': 'jazz, traditional pop, smooth, male vocals, warm voice, intimate voice, classic voice'
      }
      
      fullStyle = artistStyleMap[formData.artistStyle] || 'pop, energetic'
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∂–∞–Ω—Ä
      const genreStyleMap: { [key: string]: string } = {
        'pop': 'pop, upbeat, mainstream, radio-friendly, catchy hooks, modern production, clear vocals',
        'rock': 'rock, electric guitars, driving drums, powerful vocals, energetic, guitar solos',
        'jazz': 'jazz, swing, improvisation, brass instruments, complex chords, sophisticated',
        'ballad': 'ballad, slow tempo, emotional, piano-driven, heartfelt vocals, romantic',
        'folk': 'folk, acoustic guitar, storytelling, organic, traditional, intimate vocals',
        'country': 'country, acoustic guitar, banjo, storytelling, down-to-earth, twangy vocals',
        'electronic': 'electronic, synthesizers, dance beats, digital production, modern, pulsing',
        'reggae': 'reggae, off-beat rhythm, bass-heavy, laid-back, Caribbean feel, relaxed vocals',
        'blues': 'blues, guitar-driven, soulful vocals, emotional, minor keys, expressive',
        'funk': 'funk, groovy bass lines, rhythmic, danceable, syncopated, tight rhythm section'
      }
      
      fullStyle = genreStyleMap[formData.musicStyle] || 'pop, upbeat, mainstream, radio-friendly, catchy hooks, modern production, clear vocals'
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –≥–æ–ª–æ—Å–∞
    if (formData.voiceType === 'female') {
      if (!fullStyle.includes('female vocals')) {
        fullStyle += ', female vocals'
      }
    } else if (formData.voiceType === 'male') {
      if (!fullStyle.includes('male vocals')) {
        fullStyle += ', male vocals'
      }
    } else if (formData.voiceType === 'duet') {
      fullStyle += ', duet, male and female vocals'
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫ —Å—Ç–∏–ª—é, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    if (formData.mood && !fullStyle.includes(formData.mood)) {
      const moodMap: { [key: string]: string } = {
        'joyful': 'joyful',
        'tender': 'tender',
        'solemn': 'solemn',
        'energetic': 'energetic'
      }
      const moodKeyword = moodMap[formData.mood] || formData.mood
      fullStyle += `, ${moodKeyword}`
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –æ–±—Ä—ñ–∑–∞—î–º–æ —Å—Ç–∏–ª—å –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏
    if (fullStyle.length > 190) {
      console.log(`‚ö†Ô∏è –°—Ç–∏–ª—å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (${fullStyle.length} —Å–∏–º–≤–æ–ª—ñ–≤), –æ–±—Ä—ñ–∑–∞—é –¥–æ 190`)
      fullStyle = fullStyle.substring(0, 190).replace(/,\s*$/, '') // –æ–±—Ä—ñ–∑–∞—î–º–æ —ñ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–æ–º—É –≤ –∫—ñ–Ω—Ü—ñ
      console.log(`üéØ –û–±—Ä—ñ–∑–∞–Ω–∏–π —Å—Ç–∏–ª—å: ${fullStyle}`)
    }
    
    console.log('üé® –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è –¥–ª—è Suno:')
    console.log('  - useStarStyle:', formData.useStarStyle)
    console.log('  - artistStyle:', formData.artistStyle)
    console.log('  - musicStyle:', formData.musicStyle)
    console.log('  - voiceType:', formData.voiceType)
    console.log('  - mood:', formData.mood)
    console.log('üéØ –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∏–ª—å –¥–ª—è Suno:', fullStyle)
    
    const requestBody = {
      customMode: true,
      model: 'V3_5',
      prompt: text,
      style: fullStyle,
      title: `–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è ${formData.recipientName}`,
      output_format: 'mp3',
      duration: 120,
      instrumental: false,
      callBackUrl: process.env.NEXT_PUBLIC_SUNO_CALLBACK_URL || 'https://webhook.site/60dbf7c4-e76a-498a-b33d-b1868ae6ee9c'
    }

    console.log('üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –º—É–∑–∏–∫–∏...')
    console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–ø–∏—Ç:', requestBody)

    const createResponse = await fetch(`${SUNO_API_URL}/api/v1/generate`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${SUNO_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    })

    console.log(`üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å API: ${createResponse.status} ${createResponse.statusText}`)

    if (!createResponse.ok) {
      const errorText = await createResponse.text()
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: ${createResponse.status} - ${errorText}`)
      throw new Error(`HTTP error! status: ${createResponse.status}`)
    }

    const createData = await createResponse.json()
    console.log('üìã –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', createData)

    if (createData.code !== 200) {
      console.error(`‚ùå API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É: ${createData.msg}`)
      // –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç Suno API
      throw new Error(createData.msg || 'API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É')
    }

    if (!createData.data || !createData.data.taskId) {
      console.error('‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ ID –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ Suno API')
      console.error('üîé –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Suno API:', JSON.stringify(createData, null, 2))
      throw new Error('–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ ID –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ Suno API')
    }

    const taskId = createData.data.taskId
    console.log(`‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID: ${taskId}`)

    // –î–æ–∂–∏–¥–∞–µ–º—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏ OpenAI, –µ—Å–ª–∏ –ø—Ä–µ–º–∏—É–º
    if (formData.plan === 'premium' && coverPromise) {
      try {
        openaiCoverStatus = 'waiting'
        openaiCoverUrl = await coverPromise
        openaiCoverStatus = 'success'
        console.log('üñºÔ∏è [OpenAI] –û–±–∫–ª–∞–¥–∏–Ω–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞:', openaiCoverUrl)
      } catch (err) {
        openaiCoverStatus = 'error'
        openaiCoverError = String(err)
        console.error('‚ùå [OpenAI] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏:', err)
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º taskId –∏ –æ–±–ª–æ–∂–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    return {
      url: '',
      type: 'pending',
      taskId,
      coverUrl: formData.plan === 'premium' ? openaiCoverUrl : undefined,
      openaiCoverStatus,
      openaiCoverError
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—É–∑–∏–∫–∏:', error)
    throw error
  }
}

export async function waitForGeneration(taskId: string): Promise<{ url: string; type: string; coverUrl?: string; secondMusicUrl?: string }> {
  console.log(`‚è≥ –û—á—ñ–∫—É—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–ª—è taskId: ${taskId}`)
  
  const maxAttempts = 60 // 5 –º–∏–Ω—É—Ç
  let attempts = 0
  
  while (attempts < maxAttempts) {
    await new Promise(resolve => setTimeout(resolve, 5000)) // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
    attempts++
    
    try {
      console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É (—Å–ø—Ä–æ–±–∞ ${attempts}/${maxAttempts})...`)
      
      const response = await fetch(`${SUNO_API_URL}/api/v1/generate/record-info?taskId=${taskId}`, {
        headers: {
          'Authorization': `Bearer ${SUNO_API_KEY}`,
        },
      })

      if (!response.ok) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É: ${response.status}`)
        continue
      }

      const data = await response.json()
      console.log(`üìä –°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è:`, data)

      if (data.code === 200 && data.data) {
        const taskData = data.data
        const status = taskData.status
        
        console.log(`üìã –°—Ç–∞—Ç—É—Å: ${status}`)
        
        if (status === 'TEXT_SUCCESS') {
          console.log('‚úÖ –¢–µ–∫—Å—Ç –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ')
          // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
          continue
        } else if (status === 'FIRST_SUCCESS') {
          console.log('‚úÖ –ü–µ—Ä—à–∞ –≤–µ—Ä—Å—ñ—è –≥–æ—Ç–æ–≤–∞')
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ sunoData
          if (taskData.response && taskData.response.sunoData && Array.isArray(taskData.response.sunoData)) {
            const track = taskData.response.sunoData[0]
            if (track && track.streamAudioUrl) {
              console.log('üéµ –û—Ç—Ä–∏–º–∞–Ω–æ streaming URL:', track.streamAudioUrl)
              // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
              continue
            }
          }
          
          // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
          continue
        } else if (status === 'SUCCESS') {
          console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ')
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏ –æ–±–ª–æ–∂–∫—É –∏–∑ sunoData
          if (taskData.response && taskData.response.sunoData && Array.isArray(taskData.response.sunoData)) {
            const tracks = taskData.response.sunoData
            
            console.log(`üéµ –í—Å—å–æ–≥–æ —Ç—Ä–µ–∫—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${tracks.length}`)
            console.log(`üéµ –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å Suno API:`, JSON.stringify(tracks, null, 2))
            
            tracks.forEach((track: any, index: number) => {
              console.log(`üéµ –¢—Ä–µ–∫ ${index + 1}:`, {
                audioUrl: track.audioUrl,
                streamAudioUrl: track.streamAudioUrl,
                imageUrl: track.imageUrl,
                hasAudioUrl: !!track.audioUrl,
                hasStreamAudioUrl: !!track.streamAudioUrl,
                allFields: Object.keys(track)
              })
            })
            
            // –ü–µ—Ä–≤–∞—è –ø–µ—Å–Ω—è
            if (tracks.length > 0) {
              const firstTrack = tracks[0]
              console.log('üñºÔ∏è –î–∞–Ω—ñ –ø–µ—Ä—à–æ–≥–æ —Ç—Ä–µ–∫—É –¥–ª—è –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏:', {
                imageUrl: firstTrack.imageUrl,
                source_image_url: firstTrack.source_image_url,
                image_url: firstTrack.image_url,
                hasImageUrl: !!firstTrack.imageUrl,
                hasSourceImageUrl: !!firstTrack.source_image_url,
                hasImageUrlAlt: !!firstTrack.image_url
              })
              
              let audioUrl = ''
              let coverUrl = ''
              let musicUrl = ''
              let secondMusicUrl = ''
              
              if (firstTrack.audioUrl) {
                audioUrl = firstTrack.audioUrl
                musicUrl = firstTrack.audioUrl
              } else if (firstTrack.streamAudioUrl) {
                audioUrl = firstTrack.streamAudioUrl
                musicUrl = firstTrack.streamAudioUrl
              }
              
              // –û–±–ª–æ–∂–∫–∞ –æ—Ç Suno API - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
              if (firstTrack.imageUrl) {
                coverUrl = firstTrack.imageUrl
                console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –≤—ñ–¥ Suno API (SUCCESS, imageUrl):', coverUrl)
              } else if (firstTrack.source_image_url) {
                coverUrl = firstTrack.source_image_url
                console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –≤—ñ–¥ Suno API (SUCCESS, source_image_url):', coverUrl)
              } else if (firstTrack.image_url) {
                coverUrl = firstTrack.image_url
                console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –≤—ñ–¥ Suno API (SUCCESS, image_url):', coverUrl)
              }
              
              // –ï—Å–ª–∏ –æ–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ—Ç–≤–µ—Ç–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ callback'–∞
              if (!coverUrl) {
                try {
                  const baseUrl = typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000'
                  const callbackResponse = await fetch(`${baseUrl}/api/generate/music/callback?taskId=${taskId}`)
                  
                  if (callbackResponse.ok) {
                    const callbackData = await callbackResponse.json()
                    if (callbackData.coverUrl) {
                      coverUrl = callbackData.coverUrl
                      console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –∑ callback (waitForGeneration):', coverUrl)
                    }
                  }
                } catch (callbackError) {
                  console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –∑ callback (waitForGeneration):', callbackError)
                }
              }
              
              // –í—Ç–æ—Ä–∞—è –ø–µ—Å–Ω—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
              if (tracks.length > 1) {
                const secondTrack = tracks[1]
                console.log('üéµ –î–∞–Ω—ñ –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–∫—É:', {
                  audioUrl: secondTrack.audioUrl,
                  streamAudioUrl: secondTrack.streamAudioUrl,
                  hasAudioUrl: !!secondTrack.audioUrl,
                  hasStreamAudioUrl: !!secondTrack.streamAudioUrl
                })
                
                if (secondTrack.audioUrl) {
                  secondMusicUrl = secondTrack.audioUrl
                  console.log('üéµ –û—Ç—Ä–∏–º–∞–Ω–æ –¥—Ä—É–≥—É –ø—ñ—Å–Ω—é (audioUrl):', secondMusicUrl)
                } else if (secondTrack.streamAudioUrl) {
                  secondMusicUrl = secondTrack.streamAudioUrl
                  console.log('üéµ –û—Ç—Ä–∏–º–∞–Ω–æ –¥—Ä—É–≥—É –ø—ñ—Å–Ω—é (streamAudioUrl):', secondMusicUrl)
                }
              } else {
                console.log('‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ç—Ä–µ–∫, –¥—Ä—É–≥–æ–≥–æ –Ω–µ–º–∞—î')
              }
              
              console.log(`üéµ –§—ñ–Ω–∞–ª—å–Ω—ñ URL: musicUrl=${musicUrl}, secondMusicUrl=${secondMusicUrl}`)
              console.log('üéµ –û—Ç—Ä–∏–º–∞–Ω–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π URL:', audioUrl)
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±–æ–∏–º–∏ —Ç—Ä–µ–∫–∞–º–∏
              try {
                const taskData = data.data
                console.log('üíæ waitForGeneration: –∑–±–µ—Ä—ñ–≥–∞—é —Å—Ç–∞—Ç—É—Å –∑ —Ç—Ä–µ–∫–∞–º–∏:', {
                  musicUrl: audioUrl,
                  secondMusicUrl: secondMusicUrl,
                  coverUrl: coverUrl
                })
                await saveGenerationStatus(taskId, {
                  status: 'SUCCESS',
                  type: 'complete',
                  musicUrl: audioUrl,
                  coverUrl: coverUrl,
                  secondMusicUrl: secondMusicUrl,
                  data: taskData
                }, taskData.formData || {}, taskData.text || '')
                console.log('üíæ –°—Ç–∞—Ç—É—Å SUCCESS –∑ –æ–±–æ–º–∞ —Ç—Ä–µ–∫–∞–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î (waitForGeneration)')
              } catch (saveError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É SUCCESS (waitForGeneration):', saveError)
              }
              
              return { url: audioUrl, type: 'complete', coverUrl, secondMusicUrl }
            }
          }
        } else if (status === 'FAILED') {
          console.error('‚ùå –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è')
          throw new Error('–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è')
        } else if (status === 'GENERATE_AUDIO_FAILED') {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ')
          throw new Error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ')
        }
      }
      
      console.log(`‚è≥ –°—Ç–∞—Ç—É—Å —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∏–π, –æ—á—ñ–∫—É—é... (—Å–ø—Ä–æ–±–∞ ${attempts}/${maxAttempts})`)
      
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É (—Å–ø—Ä–æ–±–∞ ${attempts}):`, error)
    }
  }
  
  console.error('‚ùå –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ')
  throw new Error('–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ')
}

export async function getGenerationStatus(taskId: string) {
  console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è taskId: ${taskId}`)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
  const cached = statusCache.get(taskId)
  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
    console.log(`üìã –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–µ—à–æ–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è taskId: ${taskId}`)
    return cached.data
  }
  
  try {
    // –°–æ–±–ª—é–¥–∞–µ–º rate limit
    await rateLimitDelay()
    
    const response = await fetch(`${SUNO_API_URL}/api/v1/generate/record-info?taskId=${taskId}`, {
      headers: {
        'Authorization': `Bearer ${SUNO_API_KEY}`,
      },
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É: ${response.status} - ${errorText}`)
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ rate limit, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
      if (response.status === 429 || errorText.includes('frequency is too high')) {
        console.log('‚ö†Ô∏è Rate limit –¥–æ—Å—è–≥–Ω—É—Ç–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–µ—à –∞–±–æ –±–∞–∑–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å')
        if (cached) {
          return cached.data
        }
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
        return {
          success: true,
          type: 'pending',
          status: 'PENDING',
          musicUrl: '',
          coverUrl: '',
          secondMusicUrl: '',
          openaiCoverStatus: '',
          openaiCoverUrl: '',
          openaiCoverError: '',
          data: { status: 'PENDING' }
        }
      }
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      let errorMessage = `HTTP error! status: ${response.status}`
      if (errorText.includes('insufficient') || errorText.includes('credits')) {
        errorMessage = '–ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ —Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
      } else if (errorText.includes('invalid') || errorText.includes('bad request')) {
        errorMessage = '–ü–æ–º–∏–ª–∫–∞ –≤ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ taskId —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.'
      }
      
      return { 
        success: false,
        error: errorMessage,
        details: errorText
      }
    }

    const data = await response.json()
    console.log(`üìä –°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è:`, data)

    if (data.code === 200 && data.data) {
      const taskData = data.data
      const status = taskData.status
      
      let type = 'pending'
      let musicUrl = ''
      let coverUrl = ''
      let secondMusicUrl = ''
      
      if (status === 'TEXT_SUCCESS') {
        type = 'text'
        console.log('üìù –°—Ç–∞—Ç—É—Å TEXT_SUCCESS, –ø–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É –≤ –¥–∞–Ω–∏—Ö')
        console.log('üìù –î–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:', JSON.stringify(taskData, null, 2))
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å TEXT_SUCCESS –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
          const formData = taskData.formData || (taskData.data && taskData.data.formData) || {}
          const text = taskData.text || ''
          await saveGenerationStatus(taskId, {
            status: 'TEXT_SUCCESS',
            type: 'text',
            musicUrl: '',
            coverUrl: '',
            secondMusicUrl: '',
            data: taskData
          }, formData, text)
          console.log('üíæ –°—Ç–∞—Ç—É—Å TEXT_SUCCESS –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î')
        } catch (saveError) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É TEXT_SUCCESS:', saveError)
        }
        
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π plan
        let plan = (taskData.formData && taskData.formData.plan) || (taskData.data && taskData.data.formData && taskData.data.formData.plan)
        if (!plan) {
          // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –∫–µ—à–∞
          const cached = statusCache.get(taskId)
          if (cached && cached.data && cached.data.formData && cached.data.formData.plan) {
            plan = cached.data.formData.plan
          } else {
            // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –±–∞–∑—ã
            try {
              const baseUrl = typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000'
              const statusRes = await fetch(`${baseUrl}/api/generate/music/status?taskId=${taskId}`)
              if (statusRes.ok) {
                const statusJson = await statusRes.json()
                if (statusJson.formData && statusJson.formData.plan) {
                  plan = statusJson.formData.plan
                }
              }
            } catch (e) { /* ignore */ }
          }
        }
        plan = plan || 'basic'
        // –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é OpenAI-–æ–±–ª–æ–∂–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if (plan === 'premium' && !taskData.openaiCoverUrl) {
          try {
            console.log('üü° [DEBUG] –ó–∞–ø—É—Å–∫–∞—é generateCoverArt –¥–ª—è OpenAI (premium)')
            const { generateCoverArt } = await import('@/services/coverArtService')
            const openaiCoverUrl = await generateCoverArt(taskData.formData || (taskData.data && taskData.data.formData) || {}, taskData.text || '', 'premium')
            console.log('üü¢ [DEBUG] generateCoverArt –≤–µ—Ä–Ω—É–ª:', openaiCoverUrl)
            taskData.openaiCoverUrl = openaiCoverUrl
            taskData.openaiCoverStatus = 'success'
            taskData.openaiCoverError = ''
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º plan
            await saveGenerationStatus(taskId, {
              ...taskData,
              openaiCoverUrl,
              openaiCoverStatus: 'success',
              openaiCoverError: '',
              plan
            }, { ...taskData.formData, plan }, taskData.text || '')
            console.log('üñºÔ∏è [OpenAI] –û–±–∫–ª–∞–¥–∏–Ω–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–º—ñ—É–º:', openaiCoverUrl)
          } catch (err) {
            taskData.openaiCoverStatus = 'error'
            taskData.openaiCoverError = String(err)
            await saveGenerationStatus(taskId, {
              ...taskData,
              openaiCoverUrl: '',
              openaiCoverStatus: 'error',
              openaiCoverError: String(err),
              plan
            }, { ...taskData.formData, plan }, taskData.text || '')
            console.error('‚ùå [OpenAI] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏ –¥–ª—è –ø—Ä–µ–º—ñ—É–º:', err)
          }
        } else if (plan !== 'premium') {
          console.log('üîµ [DEBUG] generateCoverArt –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, plan:', plan)
        }
      } else if (status === 'PENDING') {
        type = 'pending'
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å PENDING –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
          const formData = taskData.formData || (taskData.data && taskData.data.formData) || {}
          const text = taskData.text || ''
          await saveGenerationStatus(taskId, {
            status: 'PENDING',
            type: 'pending',
            musicUrl: '',
            coverUrl: '',
            secondMusicUrl: '',
            data: taskData
          }, formData, text)
          console.log('üíæ –°—Ç–∞—Ç—É—Å PENDING –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î')
        } catch (saveError) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É PENDING:', saveError)
        }
      } else if (status === 'FIRST_SUCCESS') {
        type = 'streaming'
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏ –æ–±–ª–æ–∂–∫—É –∏–∑ sunoData –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏
        if (taskData.response && taskData.response.sunoData && Array.isArray(taskData.response.sunoData)) {
          const track = taskData.response.sunoData[0]
          if (track) {
            console.log('üñºÔ∏è –î–∞–Ω—ñ —Ç—Ä–µ–∫—É FIRST_SUCCESS –¥–ª—è –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏:', {
              imageUrl: track.imageUrl,
              source_image_url: track.source_image_url,
              image_url: track.image_url,
              hasImageUrl: !!track.imageUrl,
              hasSourceImageUrl: !!track.source_image_url,
              hasImageUrlAlt: !!track.image_url
            })
            
            if (track.streamAudioUrl) {
              musicUrl = track.streamAudioUrl
            } else if (track.audioUrl) {
              musicUrl = track.audioUrl
            }
            
            // –û–±–ª–æ–∂–∫–∞ –æ—Ç Suno API - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
            if (track.imageUrl) {
              coverUrl = track.imageUrl
              console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –≤—ñ–¥ Suno API (FIRST_SUCCESS, imageUrl):', coverUrl)
            } else if (track.source_image_url) {
              coverUrl = track.source_image_url
              console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –≤—ñ–¥ Suno API (FIRST_SUCCESS, source_image_url):', coverUrl)
            } else if (track.image_url) {
              coverUrl = track.image_url
              console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –≤—ñ–¥ Suno API (FIRST_SUCCESS, image_url):', coverUrl)
            }
            
            // –ï—Å–ª–∏ –æ–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ—Ç–≤–µ—Ç–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ callback'–∞
            if (!coverUrl) {
              try {
                const baseUrl = typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000'
                const callbackResponse = await fetch(`${baseUrl}/api/generate/music/callback?taskId=${taskId}`)
                
                if (callbackResponse.ok) {
                  const callbackData = await callbackResponse.json()
                  if (callbackData.coverUrl) {
                    coverUrl = callbackData.coverUrl
                    console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –∑ callback (FIRST_SUCCESS):', coverUrl)
                  }
                }
              } catch (callbackError) {
                console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –∑ callback (FIRST_SUCCESS):', callbackError)
              }
            }
          }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å FIRST_SUCCESS –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
          const formData = taskData.formData || (taskData.data && taskData.data.formData) || {}
          const text = taskData.text || ''
          await saveGenerationStatus(taskId, {
            status: 'FIRST_SUCCESS',
            type: 'streaming',
            musicUrl: musicUrl,
            coverUrl: coverUrl,
            secondMusicUrl: secondMusicUrl,
            data: taskData
          }, formData, text)
          console.log('üíæ –°—Ç–∞—Ç—É—Å FIRST_SUCCESS –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î')
        } catch (saveError) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É FIRST_SUCCESS:', saveError)
        }
      } else if (status === 'SUCCESS') {
        type = 'complete'
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏ –æ–±–ª–æ–∂–∫—É –∏–∑ sunoData
        if (taskData.response && taskData.response.sunoData && Array.isArray(taskData.response.sunoData)) {
          const tracks = taskData.response.sunoData
          
          console.log(`üéµ –í—Å—å–æ–≥–æ —Ç—Ä–µ–∫—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${tracks.length}`)
          console.log(`üéµ –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å Suno API:`, JSON.stringify(tracks, null, 2))
          
          tracks.forEach((track: any, index: number) => {
            console.log(`üéµ –¢—Ä–µ–∫ ${index + 1}:`, {
              audioUrl: track.audioUrl,
              streamAudioUrl: track.streamAudioUrl,
              imageUrl: track.imageUrl,
              hasAudioUrl: !!track.audioUrl,
              hasStreamAudioUrl: !!track.streamAudioUrl,
              allFields: Object.keys(track)
            })
          })
          
          // –ü–µ—Ä–≤–∞—è –ø–µ—Å–Ω—è
          if (tracks.length > 0) {
            const firstTrack = tracks[0]
            console.log('üñºÔ∏è –î–∞–Ω—ñ –ø–µ—Ä—à–æ–≥–æ —Ç—Ä–µ–∫—É –¥–ª—è –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏:', {
              imageUrl: firstTrack.imageUrl,
              source_image_url: firstTrack.source_image_url,
              image_url: firstTrack.image_url,
              hasImageUrl: !!firstTrack.imageUrl,
              hasSourceImageUrl: !!firstTrack.source_image_url,
              hasImageUrlAlt: !!firstTrack.image_url
            })
            
            if (firstTrack.audioUrl) {
              musicUrl = firstTrack.audioUrl
            } else if (firstTrack.streamAudioUrl) {
              musicUrl = firstTrack.streamAudioUrl
            }
            
            // –û–±–ª–æ–∂–∫–∞ –æ—Ç Suno API - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
            if (firstTrack.imageUrl) {
              coverUrl = firstTrack.imageUrl
              console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –≤—ñ–¥ Suno API (SUCCESS, imageUrl):', coverUrl)
            } else if (firstTrack.source_image_url) {
              coverUrl = firstTrack.source_image_url
              console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –≤—ñ–¥ Suno API (SUCCESS, source_image_url):', coverUrl)
            } else if (firstTrack.image_url) {
              coverUrl = firstTrack.image_url
              console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –≤—ñ–¥ Suno API (SUCCESS, image_url):', coverUrl)
            }
            
            // –ï—Å–ª–∏ –æ–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ—Ç–≤–µ—Ç–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ callback'–∞
            if (!coverUrl) {
              try {
                const baseUrl = typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000'
                const callbackResponse = await fetch(`${baseUrl}/api/generate/music/callback?taskId=${taskId}`)
                
                if (callbackResponse.ok) {
                  const callbackData = await callbackResponse.json()
                  if (callbackData.coverUrl) {
                    coverUrl = callbackData.coverUrl
                    console.log('üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –∑ callback:', coverUrl)
                  }
                }
              } catch (callbackError) {
                console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –∑ callback:', callbackError)
              }
            }
          }
          
          // –í—Ç–æ—Ä–∞—è –ø–µ—Å–Ω—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
          if (tracks.length > 1) {
            const secondTrack = tracks[1]
            console.log('üéµ –î–∞–Ω—ñ –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–∫—É:', {
              audioUrl: secondTrack.audioUrl,
              streamAudioUrl: secondTrack.streamAudioUrl,
              hasAudioUrl: !!secondTrack.audioUrl,
              hasStreamAudioUrl: !!secondTrack.streamAudioUrl
            })
            
            if (secondTrack.audioUrl) {
              secondMusicUrl = secondTrack.audioUrl
              console.log('üéµ –û—Ç—Ä–∏–º–∞–Ω–æ –¥—Ä—É–≥—É –ø—ñ—Å–Ω—é (audioUrl):', secondMusicUrl)
            } else if (secondTrack.streamAudioUrl) {
              secondMusicUrl = secondTrack.streamAudioUrl
              console.log('üéµ –û—Ç—Ä–∏–º–∞–Ω–æ –¥—Ä—É–≥—É –ø—ñ—Å–Ω—é (streamAudioUrl):', secondMusicUrl)
            }
          } else {
            console.log('‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ç—Ä–µ–∫, –¥—Ä—É–≥–æ–≥–æ –Ω–µ–º–∞—î')
          }
          
          console.log(`üéµ –§—ñ–Ω–∞–ª—å–Ω—ñ URL: musicUrl=${musicUrl}, secondMusicUrl=${secondMusicUrl}`)
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω –∏–∑ taskData
        const plan = taskData.plan || 'basic'
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å SUCCESS –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
          const formData = taskData.formData || (taskData.data && taskData.data.formData) || {}
          const text = taskData.text || ''
          await saveGenerationStatus(taskId, {
            status: 'SUCCESS',
            type: 'complete',
            musicUrl: musicUrl,
            coverUrl: coverUrl,
            secondMusicUrl: secondMusicUrl,
            data: taskData
          }, formData, text)
          console.log('üíæ –°—Ç–∞—Ç—É—Å SUCCESS –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î')
        } catch (saveError) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É SUCCESS:', saveError)
        }
        
        // --- –î–û–ë–ê–í–õ–Ø–ï–ú: –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º coverUrl –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ---
        let actualCoverUrl = coverUrl
        if (plan === 'premium' && (taskData.openaiCoverUrl || taskData.openaiCoverUrl === '')) {
          actualCoverUrl = taskData.openaiCoverUrl
        }
        const result = {
          success: true,
          type,
          status,
          musicUrl,
          coverUrl: actualCoverUrl,
          secondMusicUrl,
          openaiCoverStatus: taskData.openaiCoverStatus || '',
          openaiCoverUrl: taskData.openaiCoverUrl || '',
          openaiCoverError: taskData.openaiCoverError || '',
          data: taskData
        }
        // --- –î–û–ë–ê–í–õ–Ø–ï–ú: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
        await saveGenerationStatus(taskId, {
          ...taskData,
          status: 'SUCCESS',
          type: 'complete',
          musicUrl: musicUrl,
          coverUrl: actualCoverUrl,
          secondMusicUrl: secondMusicUrl,
          openaiCoverUrl: taskData.openaiCoverUrl || '',
          openaiCoverStatus: taskData.openaiCoverStatus || '',
          openaiCoverError: taskData.openaiCoverError || '',
          plan
        }, { ...taskData.formData, plan }, taskData.text || '')
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        statusCache.set(taskId, { data: result, timestamp: Date.now() })
        
        return result
      } else if (status === 'FAILED') {
        type = 'failed'
        console.log('‚ùå –°—Ç–∞—Ç—É—Å FAILED, –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è')
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å FAILED –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
          const formData = taskData.formData || (taskData.data && taskData.data.formData) || {}
          const text = taskData.text || ''
          await saveGenerationStatus(taskId, {
            status: 'FAILED',
            type: 'failed',
            musicUrl: '',
            coverUrl: '',
            secondMusicUrl: '',
            data: taskData
          }, formData, text)
          console.log('üíæ –°—Ç–∞—Ç—É—Å FAILED –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î')
        } catch (saveError) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É FAILED:', saveError)
        }
        
        return {
          success: false,
          type,
          status,
          error: '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è',
          data: taskData
        }
      } else if (status === 'GENERATE_AUDIO_FAILED') {
        type = 'failed'
        console.log('‚ùå –°—Ç–∞—Ç—É—Å GENERATE_AUDIO_FAILED, –ø–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ')
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å GENERATE_AUDIO_FAILED –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
          const formData = taskData.formData || (taskData.data && taskData.data.formData) || {}
          const text = taskData.text || ''
          await saveGenerationStatus(taskId, {
            status: 'GENERATE_AUDIO_FAILED',
            type: 'failed',
            musicUrl: '',
            coverUrl: '',
            secondMusicUrl: '',
            data: taskData
          }, formData, text)
          console.log('üíæ –°—Ç–∞—Ç—É—Å GENERATE_AUDIO_FAILED –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î')
        } catch (saveError) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É GENERATE_AUDIO_FAILED:', saveError)
        }
        
        return {
          success: false,
          type,
          status,
          error: '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ',
          data: taskData
        }
      }

      return data
    }

    return data
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É:', error)
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    await resetGenerationStatus(taskId)
    
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    if (cached) {
      console.log('üìã –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–µ—à–æ–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ')
      return cached.data
    }
    
    return { error: 'Failed to check status' }
  }
}

export async function saveGenerationStatus(taskId: string, statusData: any, formData?: any, text?: string) {
  try {
    console.log(`üíæ saveGenerationStatus: –∑–±–µ—Ä—ñ–≥–∞—é —Å—Ç–∞—Ç—É—Å –¥–ª—è taskId: ${taskId}`)
    console.log(`üñºÔ∏è saveGenerationStatus: –æ–±–∫–ª–∞–¥–∏–Ω–∫–∞ –≤ statusData:`, statusData.coverUrl)
    console.log(`üñºÔ∏è saveGenerationStatus: —Ç–∏–ø –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏:`, typeof statusData.coverUrl)
    console.log(`üñºÔ∏è saveGenerationStatus: –¥–æ–≤–∂–∏–Ω–∞ –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏:`, statusData.coverUrl?.length)
    console.log(`üéµ saveGenerationStatus: musicUrl:`, statusData.musicUrl)
    console.log(`üéµ saveGenerationStatus: secondMusicUrl:`, statusData.secondMusicUrl)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–¥
    if (typeof window === 'undefined') {
      // –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Å—Ä–µ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API
      console.log('üñ•Ô∏è –°–µ—Ä–≤–µ—Ä–Ω–∞ —Å—Ä–µ–¥–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø—Ä—è–º–∏–π –≤–∏–∫–ª–∏–∫ API')
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã
      const { NextRequest } = await import('next/server')
      const clientPromise = (await import('@/lib/mongodb')).default
      
      try {
        const client = await clientPromise
        const db = client.db()
        
        const statusRecord = {
          taskId,
          userId: formData?.userId || '',
          status: statusData.status,
          type: statusData.type || 'generation',
          musicUrl: statusData.musicUrl || '',
          coverUrl: statusData.coverUrl || '',
          secondMusicUrl: statusData.secondMusicUrl || '',
          openaiCoverStatus: statusData.openaiCoverStatus || '',
          openaiCoverUrl: statusData.openaiCoverUrl || '',
          openaiCoverError: statusData.openaiCoverError || '',
          data: statusData.data || {},
          formData: formData || {},
          text: text || '',
          updatedAt: new Date()
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await db.collection('generation_status').updateOne(
          { taskId },
          { 
            $set: statusRecord,
            $setOnInsert: { createdAt: new Date() }
          },
          { upsert: true }
        )

        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î (—Å–µ—Ä–≤–µ—Ä) –¥–ª—è taskId: ${taskId}`)
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${statusData.status}`)
        
        return true
      } catch (dbError) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î (—Å–µ—Ä–≤–µ—Ä):', dbError)
        return false
      }
    } else {
      // –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å—Ä–µ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch
      console.log('üåê –ö–ª—ñ—î–Ω—Ç—Å—å–∫–∞ —Å—Ä–µ–¥–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fetch')
      
      const baseUrl = window.location.origin
      const response = await fetch(`${baseUrl}/api/generate/music/save-status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          taskId,
          status: statusData.status,
          type: statusData.type,
          musicUrl: statusData.musicUrl || '',
          coverUrl: statusData.coverUrl || '',
          secondMusicUrl: statusData.secondMusicUrl || '',
          data: statusData.data,
          formData: formData || {},
          text: text || '',
          openaiCoverStatus: statusData.openaiCoverStatus || '',
          openaiCoverUrl: statusData.openaiCoverUrl || '',
          openaiCoverError: statusData.openaiCoverError || ''
        }),
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      console.log(`üíæ –°—Ç–∞—Ç—É—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î (–∫–ª—ñ—î–Ω—Ç) –¥–ª—è taskId: ${taskId}`)
      console.log(`üíæ –°—Ç–∞—Ç—É—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${statusData.status}`)
      
      // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      if (statusData.status === 'SUCCESS' && formData && text) {
        try {
          console.log('üíæ –ó–±–µ—Ä—ñ–≥–∞—é –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤ –æ—Å–Ω–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó')
          
          const plan = formData.plan || 'basic'
          
          // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
          const basicPrice = 100
          const premiumPrice = 200
          
          const greetingResponse = await fetch(`${baseUrl}/api/greetings/auto-save`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              taskId: taskId,
              recipientName: formData.recipientName,
              occasion: formData.occasion,
              relationship: formData.relationship,
              personalDetails: formData.personalDetails,
              musicStyle: formData.musicStyle,
              mood: formData.mood,
              greetingLanguage: formData.greetingLanguage,
              text: text,
              plan: plan,
              totalPrice: plan === 'premium' ? premiumPrice : basicPrice,
              paymentMethod: 'liqpay',
              musicUrl: statusData.musicUrl || '',
              secondMusicUrl: statusData.secondMusicUrl || '',
              coverUrl: statusData.coverUrl || '',
              allowSharing: false
            })
          })

          if (greetingResponse.ok) {
            const result = await greetingResponse.json()
            console.log('‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é:', result.greeting.id)
          } else {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤ –æ—Å–Ω–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é:', greetingResponse.status)
          }
        } catch (greetingError) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤ –æ—Å–Ω–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é:', greetingError)
        }
      }
      
      return true
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error)
    
    // Fallback –Ω–∞ localStorage —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if (typeof window !== 'undefined') {
      const statusRecord = {
        taskId,
        status: statusData.status,
        type: statusData.type,
        musicUrl: statusData.musicUrl || '',
        coverUrl: statusData.coverUrl || '',
        secondMusicUrl: statusData.secondMusicUrl || '',
        data: statusData.data,
        formData: formData || {},
        text: text || '',
        updatedAt: new Date()
      }
      localStorage.setItem(`generation_status_${taskId}`, JSON.stringify(statusRecord))
      console.log(`üíæ –°—Ç–∞—Ç—É—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage –¥–ª—è taskId: ${taskId}`)
    }
    
    return false
  }
}

export async function getStoredGenerationStatus(taskId: string) {
  try {
    console.log(`üîç getStoredGenerationStatus: –æ—Ç—Ä–∏–º—É—é —Å—Ç–∞—Ç—É—Å –¥–ª—è taskId: ${taskId}`)
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const baseUrl = typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000'
    const response = await fetch(`${baseUrl}/api/generate/music/save-status`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        taskId,
        action: 'get'
      })
    })
    
    if (response.ok) {
      const statusRecord = await response.json()
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –ë–î –¥–ª—è taskId: ${taskId}`)
      console.log(`üñºÔ∏è getStoredGenerationStatus: –æ–±–∫–ª–∞–¥–∏–Ω–∫–∞ –∑ –ë–î:`, statusRecord.coverUrl)
      console.log(`üñºÔ∏è getStoredGenerationStatus: —Ç–∏–ø –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏:`, typeof statusRecord.coverUrl)
      console.log(`üñºÔ∏è getStoredGenerationStatus: –¥–æ–≤–∂–∏–Ω–∞ –æ–±–∫–ª–∞–¥–∏–Ω–∫–∏:`, statusRecord.coverUrl?.length)
      return statusRecord
    }
    
    // Fallback –Ω–∞ localStorage
    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem(`generation_status_${taskId}`)
      if (stored) {
        const statusRecord = JSON.parse(stored)
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ localStorage –¥–ª—è taskId: ${taskId}`)
        return statusRecord
      }
    }
    
    return null
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É:', error)
    
    // Fallback –Ω–∞ localStorage
    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem(`generation_status_${taskId}`)
      if (stored) {
        const statusRecord = JSON.parse(stored)
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ localStorage (fallback) –¥–ª—è taskId: ${taskId}`)
        return statusRecord
      }
    }
    
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
export async function resetGenerationStatus(taskId: string) {
  try {
    console.log(`üîÑ –°–∫–∏–¥–∞—é —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–ª—è taskId: ${taskId}`)
    
    // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    setActiveGeneration(null)
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    statusCache.delete(taskId)
    
    // –û—á–∏—â–∞–µ–º localStorage
    if (typeof window !== 'undefined') {
      localStorage.removeItem(`generation_status_${taskId}`)
      localStorage.removeItem('activeGeneration')
    }
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–∫–∏–Ω—É—Ç–æ –¥–ª—è taskId: ${taskId}`)
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:', error)
  }
}