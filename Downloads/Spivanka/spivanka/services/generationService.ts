import type { 
  FormData, 
  GenerationState, 
  GenerationStatus, 
  MusicGenerationStep, 
  Plan,
  GenerationStatusResponse,
  MusicGenerationResult 
} from '@/types'
import { generateId, safeLocalStorage, handleApiError, delay } from '@/lib/utils'
import { safeToast } from '@/lib/toast'

const STORAGE_KEYS = {
  GENERATION_STATE: 'generationState',
  ACTIVE_GENERATION: 'activeGeneration',
  USER_GREETINGS: 'userGreetings'
} as const

export class GenerationService {
  private static instance: GenerationService
  private eventSource: EventSource | null = null
  private isSSEClosed = false
  private maxRetries = 3
  private retryDelay = 2000

  static getInstance(): GenerationService {
    if (!GenerationService.instance) {
      GenerationService.instance = new GenerationService()
    }
    return GenerationService.instance
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
   */
  async generateText(formData: FormData): Promise<{ success: boolean; text?: string; error?: string }> {
    try {
      console.log('üìù –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É')
      
      const response = await fetch('/api/generate/text', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ formData })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      
      if (!result.success) {
        throw new Error(result.error || '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É')
      }

      console.log('‚úÖ –¢–µ–∫—Å—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ')
      return { success: true, text: result.text }

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É:', error)
      return handleApiError(error)
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏
   */
  async generateMusic(text: string, formData: FormData): Promise<MusicGenerationResult> {
    try {
      console.log('üéµ –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—É–∑–∏–∫–∏')
      
      const response = await fetch('/api/generate/music', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text, formData })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      
      if (!result.success) {
        throw new Error(result.error || '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—É–∑–∏–∫–∏')
      }

      console.log('‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—É–∑–∏–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ:', result.taskId)
      return {
        success: true,
        taskId: result.taskId,
        type: result.type || 'generation'
      }

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—É–∑–∏–∫–∏:', error)
      const errorResult = handleApiError(error)
      return {
        success: false,
        type: 'error',
        error: errorResult.error
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  async getGenerationStatus(taskId: string): Promise<GenerationStatusResponse> {
    try {
      const response = await fetch(`/api/generate/music/status?taskId=${taskId}`)
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error)
      return {
        success: false,
        status: 'FAILED',
        type: 'error',
        error: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      }
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SSE –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
   */
  startSSEConnection(
    taskId: string, 
    onStatusUpdate: (status: GenerationStatus, data: any) => void,
    onComplete: (data: any) => void,
    onError: (error: string) => void
  ): void {
    if (this.eventSource) {
      this.eventSource.close()
    }

    this.isSSEClosed = false
    console.log('üîó –ó–∞–ø—É—Å–∫ SSE –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–ª—è taskId:', taskId)

    this.eventSource = new EventSource(`/api/generate/music/stream?taskId=${taskId}`)

    this.eventSource.onopen = () => {
      console.log('üîó SSE –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    }

    this.eventSource.onmessage = (event) => {
      if (this.isSSEClosed) return

      try {
        const data = JSON.parse(event.data)
        console.log('üì° SSE –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', data)

        if (data.type === 'status_update' && data.status) {
          onStatusUpdate(data.status, data.data)
        } else if (data.type === 'generation_complete') {
          onComplete(data.data)
          this.closeSSEConnection()
        } else if (data.type === 'generation_failed' || data.type === 'error') {
          onError(data.error || '–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó')
          this.closeSSEConnection()
        } else if (data.type === 'generate_audio_failed') {
          onError('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
          this.closeSSEConnection()
        } else if (data.type === 'timeout') {
          onError('–ß–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏—á–µ—Ä–ø–∞–Ω–æ')
          this.closeSSEConnection()
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ SSE –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error)
        onError('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
      }
    }

    this.eventSource.onerror = (error) => {
      console.error('‚ùå SSE –ø–æ–º–∏–ª–∫–∞:', error)
      onError('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è')
      this.closeSSEConnection()
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  closeSSEConnection(): void {
    if (this.eventSource && !this.isSSEClosed) {
      this.eventSource.close()
      this.eventSource = null
      this.isSSEClosed = true
      console.log('üîó SSE –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ')
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  saveGenerationState(state: GenerationState): void {
    const storage = safeLocalStorage()
    if (storage) {
      storage.setItem(STORAGE_KEYS.GENERATION_STATE, JSON.stringify(state))
      console.log('üíæ –°—Ç–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ')
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  loadGenerationState(): GenerationState | null {
    const storage = safeLocalStorage()
    if (storage) {
      const saved = storage.getItem(STORAGE_KEYS.GENERATION_STATE)
      if (saved) {
        try {
          return JSON.parse(saved)
        } catch (error) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:', error)
        }
      }
    }
    return null
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  clearGenerationState(): void {
    const storage = safeLocalStorage()
    if (storage) {
      storage.removeItem(STORAGE_KEYS.GENERATION_STATE)
      storage.removeItem(STORAGE_KEYS.ACTIVE_GENERATION)
      console.log('üßπ –°—Ç–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ—á–∏—â–µ–Ω–æ')
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  setActiveGeneration(taskId: string | null): void {
    const storage = safeLocalStorage()
    if (storage) {
      if (taskId) {
        storage.setItem(STORAGE_KEYS.ACTIVE_GENERATION, taskId)
      } else {
        storage.removeItem(STORAGE_KEYS.ACTIVE_GENERATION)
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  getActiveGeneration(): string | null {
    const storage = safeLocalStorage()
    if (storage) {
      return storage.getItem(STORAGE_KEYS.ACTIVE_GENERATION)
    }
    return null
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ taskId
   */
  createTaskId(prefix: string = 'gen'): string {
    return generateId(prefix)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–≥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
   */
  getStepFromStatus(status: GenerationStatus): MusicGenerationStep {
    switch (status) {
      case 'PENDING':
        return 'uploading'
      case 'TEXT_SUCCESS':
        return 'text-processing'
      case 'FIRST_SUCCESS':
        return 'processing'
      case 'SUCCESS':
        return 'complete'
      case 'FAILED':
      case 'GENERATE_AUDIO_FAILED':
        return 'uploading'
      default:
        return 'uploading'
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  isGenerationComplete(status: GenerationStatus): boolean {
    return status === 'SUCCESS'
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  isGenerationFailed(status: GenerationStatus): boolean {
    return status === 'FAILED'
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
   */
  showStatusNotification(status: GenerationStatus): void {
    switch (status) {
      case 'TEXT_SUCCESS':
        safeToast.success('–¢–µ–∫—Å—Ç –æ–±—Ä–æ–±–ª–µ–Ω–æ! AI —Å—Ç–≤–æ—Ä—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—ñ—Å–Ω—ñ...')
        break
      case 'FIRST_SUCCESS':
        safeToast.success('–ü–µ—Ä—à–∞ –≤–µ—Ä—Å—ñ—è –≥–æ—Ç–æ–≤–∞! –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è —Ñ—ñ–Ω–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è...')
        break
      case 'SUCCESS':
        safeToast.success('–ú—É–∑–∏–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!')
        break
      case 'FAILED':
        safeToast.error('–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        break
      case 'GENERATE_AUDIO_FAILED':
        safeToast.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        break
    }
  }

  /**
   * Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async retryRequest<T>(
    requestFn: () => Promise<T>,
    maxRetries: number = this.maxRetries,
    delayMs: number = this.retryDelay
  ): Promise<T> {
    let lastError: Error | null = null

    for (let i = 0; i <= maxRetries; i++) {
      try {
        return await requestFn()
      } catch (error) {
        lastError = error instanceof Error ? error : new Error(String(error))
        
        if (i < maxRetries) {
          console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä ${i + 1}/${maxRetries} —á–µ—Ä–µ–∑ ${delayMs}–º—Å`)
          await delay(delayMs)
          delayMs *= 1.5 // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        }
      }
    }

    throw lastError
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const generationService = GenerationService.getInstance() 